///<reference path="../../Utilities/GlobalHelper.js"/>
///<reference path="../../Utilities/questionnaireFunctions.js"/>

var Candidates_TDG_main = (function (window, document) {


    //variables
    var LCID;
    var clientUrl;
    var resexResourceName;
    var currentWebApi;
    var isOffLine;
    var clientType;
    var oat = new Array("GC Targeted", "GC CEP", "GC Follow-up", "MOC Follow-up","MOC Targeted" );
    var formType;

    //Constants
    const FIELD_HQ_FLAG                 = "ovs_hqflag";
    const FIELD_INITIAL_RECOMMENDATION  = "ovs_hqflag";
    const FIELD_OVERSIGHT_TYPE          = "ovs_oversighttype"; 
    const FIELD_RATIONALE               = "ovs_rationale";
    const FIELD_REGIONAL_NOP            = "ovs_regionalnop";


    //********************private methods*******************

    function isJustificationMandatory(formContext, oversightTypeId) {


        if (glHelper.GetValue(formContext, "ovs_cdpriorityscore") >= 100.00) {

            var hq = glHelper.GetValue(formContext, "ovs_hqflag");
            var regional = glHelper.GetValue(formContext, "ovs_regionflag");

            if (hq == true && regional != true) {
                //TO DO: Localize if design approved
                var message = "The Priority Score is above a threshold.\r Record cannot be remove without replacement.\r Attempt to save the record will fail with error.\r Please reeturn to the Work Order Canditaes grid and use 'Justify Replacement' button to replace selected Candidate.";
                //ovs_hqflag
                //ovs_regionflag

                glHelper.SetRequiredLevel(formContext, "ovs_justification", true);
                Xrm.Navigation.openAlertDialog({ confirmButtonLabel: "OK", text: message });
            }

        }
        else {
            if (oversightTypeId != null)
                currentWebApi.retrieveRecord("ovs_oversighttype", oversightTypeId, "?$select=ovs_oversighttypenameenglish").then(
                    function success(result) {
                        var isReq = false;
                        var nameenglish = result["ovs_oversighttypenameenglish"];
                        var x = nameenglish.trim().toLowerCase();
                        for (var i = 0; i < oat.length; i++) {
                            if (x.indexOf(oat[i].toLowerCase()) > -1) {
                                isReq = true;
                                break;
                            }
                        }
                        if (isReq) glHelper.SetRequiredLevel(formContext, "ovs_justification", true);
                        else glHelper.SetRequiredLevel(formContext, "ovs_justification", false);
                    },
                    function (error) {

                        glHelper.SetRequiredLevel(formContext, "ovs_justification", false);
                        console.log("isJustificationMandatory error: " + error.message);
                        Xrm.Navigation.openErrorDialog({ message: error.message });
                    }
                );
            else glHelper.SetRequiredLevel(formContext, "ovs_justification", false);
        }
    }

    function hasCurrentUserRole(roleName)
    {
        let hasRole = false;
        let roles = Xrm.Utility.getGlobalContext().userSettings.roles;
        roles.forEach(x =>
        {
            if (x.name === "System Administrator" || x.name === roleName)
            {
                hasRole = true;
                return;
            }
        });
        return hasRole;
    }


    //********************private methods end***************

    //********************public methods***************
    return {

        OnLoad: function (executionContext) {

            var globalContext = Xrm.Utility.getGlobalContext();
            var formContext = executionContext.getFormContext();
            formType = glHelper.GetFormType(formContext);

            isOffLine = glHelper.isOffline(executionContext);
            clientType = glHelper.getClientType(executionContext);

            if (isOffLine && clientType > 0) {

                //mobile or outlook, offline first
                currentWebApi = Xrm.WebApi.offline;
                clientUrl = "https://localhost:2525";
            }
            else {

                //web, online
                currentWebApi = Xrm.WebApi.online;
                clientUrl = globalContext.getClientUrl();
            }

            
            
            if (!hasCurrentUserRole("TDG Planner"))
            {
                glHelper.SetDisabled(formContext, FIELD_HQ_FLAG, true);
                glHelper.SetDisabled(formContext, FIELD_INITIAL_RECOMMENDATION, true);
                glHelper.SetDisabled(formContext, FIELD_OVERSIGHT_TYPE, true);
                glHelper.SetDisabled(formContext, FIELD_RATIONALE, true);
                glHelper.SetDisabled(formContext, FIELD_REGIONAL_NOP, true);
            }
  
        },
    }


    //********************public methods end***************

})(window, document)
