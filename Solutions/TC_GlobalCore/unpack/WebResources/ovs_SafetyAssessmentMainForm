///<reference path="../../Utilities/GlobalHelper.js"/>

var globalFormContext;
var LCID;
var userSettings;
var resexResourceName;


function CalculatedRiskParameters_OnChange(executionContext) {

    var formContext = executionContext.getFormContext();

    var magnitudeOptionValue = glHelper.GetValue(formContext, "ovs_cymagnitudeofharm");
    var likelyhoodOptionValue = glHelper.GetValue(formContext, "ovs_cylikelihoodofharm");

    var calculatedRisk = magnitudeOptionValue * likelyhoodOptionValue;

    glHelper.SetValue(formContext, "ovs_calculatedrisk", calculatedRisk);

    var mainResourceName = "ovs_MagnitudeAndLikelihoodMessage"

    var resourceString = Xrm.Page.ui.controls.get("WebResource_MagnitudeAndLikelihoodMessage").getSrc();

    var cleanAddress = resourceString.substr(0, resourceString.lastIndexOf("/"));

    var highResource = cleanAddress + "/" + mainResourceName + "_high";
    var lowResource = cleanAddress + "/" + mainResourceName  + "_low";
    var mediumResource = cleanAddress + "/" + mainResourceName + "_medium";


    if (calculatedRisk <= 6 && calculatedRisk > 0) {
        Xrm.Page.ui.controls.get("WebResource_MagnitudeAndLikelihoodMessage").setSrc(lowResource);
    }
    else if (calculatedRisk >= 7 && calculatedRisk <= 49) {
        Xrm.Page.ui.controls.get("WebResource_MagnitudeAndLikelihoodMessage").setSrc(mediumResource);
    }
    else if (calculatedRisk >= 50) {
        Xrm.Page.ui.controls.get("WebResource_MagnitudeAndLikelihoodMessage").setSrc(highResource);
    }    
}

function OffenderCharacteristics_OnChange(executionContext)
{

    var formContext = executionContext.getFormContext();

    var harmOptionValue = glHelper.GetValue(formContext, "ovs_cyharm");
    var degreeOfMegligenceOptionValue = glHelper.GetValue(formContext, "ovs_degreeofnegligence");

    var complianceOptionValue = glHelper.GetValue(formContext, "ovs_offendercompliancehistory");
    var economicBenefitOptionValue = glHelper.GetValue(formContext, "ovs_offendereconomicbenefit");
    var mitigationOfHarmOptionValue = glHelper.GetValue(formContext, "ovs_offendermitigationofharm"); 
    var cooperationWithTCOptionValue = glHelper.GetValue(formContext, "ovs_offendercooperationwithtc"); 
    var detectionOfContraventionOptionValue = glHelper.GetValue(formContext, "ovs_offenderdetectionofcontravention");

    var sumOfOptions = (harmOptionValue + degreeOfMegligenceOptionValue + complianceOptionValue + economicBenefitOptionValue + mitigationOfHarmOptionValue + cooperationWithTCOptionValue + detectionOfContraventionOptionValue);

    if(sumOfOptions > 0)
    {
        var recommendedAction = sumOfOptions / 7;

        if (recommendedAction > 0 && recommendedAction <= 13) {
            //Verbal Warning
            glHelper.SetValue(formContext, "ovs_offenderrecommendedaction", 1);
        }
        else if (recommendedAction >= 14 && recommendedAction <= 25) {
            //Notice of Infraction
            glHelper.SetValue(formContext, "ovs_offenderrecommendedaction", 2);
        }
        else if (recommendedAction >= 26 && recommendedAction <= 1040) {
            //Ticket
            glHelper.SetValue(formContext, "ovs_offenderrecommendedaction", 3);
            var message = Xrm.Utility.getResourceString(resexResourceName, "ovs_safetyassessment.Ticket.Warning");
            glHelper.DisplayFormNotification(message, "ERROR", 10000);

        }
        else if (recommendedAction >= 1041) {
            //Refer For Investigation
            glHelper.SetValue(formContext, "ovs_offenderrecommendedaction", 4);
            var message = Xrm.Utility.getResourceString(resexResourceName, "ovs_safetyassessment.Investigation.Warning");
            glHelper.DisplayFormNotification(message, "ERROR", 10000);

        }
    }

}

function OverrideRecommendation_OnChange(executionContext)
{
    var formContext = executionContext.getFormContext();

    var recommendedActionOptionValue = glHelper.GetValue(formContext, "ovs_offenderrecommendedaction");
    var inspectorOverrideOptionValue = glHelper.GetValue(formContext, "ovs_overriderecommendation");

    var isSelectionChanged = (recommendedActionOptionValue != inspectorOverrideOptionValue);

    //Inspector elected to override the system recommendation.
    glHelper.SetControlVisibility(formContext, "ovs_overridejustification", isSelectionChanged);
    glHelper.SetRequiredLevel(formContext, "ovs_overridejustification", isSelectionChanged);
}

function submitSafetyAssessment(executionContext,primaryIds)
{
    Xrm.Page.data.entity.save();

    var errorNoViolations = Xrm.Utility.getResourceString(resexResourceName, "ovs_safetyassessment.Violations.Error");
    var errorSEATSaveWarning = Xrm.Utility.getResourceString(resexResourceName, "ovs_safetyassessment.Save.Warning");
    var messageSEATConfirmation = Xrm.Utility.getResourceString(resexResourceName, "ovs_safetyassessment.Save.Confirmation");


    //Check first if there are violations associated with this SEAT record
    
    var gridContext = executionContext.getControl("grdViolations");
    var violationCount = gridContext.getGrid().getTotalRecordCount();

    if (violationCount == 0)
    {
        glHelper.DisplayFormNotification(errorNoViolations, "ERROR", 5000);

        return;
    }

    var recordId = primaryIds[0];

    Xrm.WebApi.online
        .retrieveRecord("ovs_cysafetyassessment", recordId, "?$select=statuscode")
        .then(
            function success(result) {
                if (result["statuscode"] != 918640000) {

                    var confirmStrings = { text: errorSEATSaveWarning, title: glHelper.GetLocalizedStrings().MarkComplete };
                    var confirmOptions = { height: 200, width: 450 };

                    Xrm.Navigation.openConfirmDialog(confirmStrings, confirmOptions).then(
                        function (success) {
                            if (success.confirmed) {
                                var safetyAssessment = {};
                                safetyAssessment.statuscode = 918640000;

                                Xrm.WebApi.online.updateRecord("ovs_cysafetyassessment", recordId, safetyAssessment).then(
                                    function success(result) {
                                        glHelper.DisplayFormNotification(messageSEATConfirmation, "INFO");
                                    },
                                    function (error) {
                                        Xrm.Utility.alertDialog(error.message);
                                    });

                                console.log("Dialog closed using OK button.");
                            }
                            else
                                console.log("Dialog closed using Cancel button or X.");
                        });

                }
                else 
                    glHelper.DisplayFormNotification(glHelper.GetLocalizedStrings().SafetyAssessmentAlreadyCompleted, "ERROR", 5000);

            },
            function (error) {
                Xrm.Utility.alertDialog(error.message);
            }
        );

}


function OnLoad(executionContext) {

    
    //get context
    globalContext = glHelper.getGlobalContext();
    var formContext = executionContext.getFormContext();
    var id = glHelper.GetCurrentRecordId(formContext);

    globalFormContext = formContext;

    // 0 = Undefined, 1 = Create, 2 = Update, 3 = Read Only, 4 = Disabled, 6 = Bulk Edit
    formType = glHelper.GetFormType(formContext);

    userSettings = Xrm.Utility.getGlobalContext().userSettings;

    LCID = userSettings.languageId;

    if (LCID == 1033)
        resexResourceName = "ovs_Labels.1033.resx";
    else if (LCID == 1036)
        resexResourceName = "ovs_Labels.1036.resx";

    //If form is new, autosave so we can add violations
    if (formType == 1) {

        // Because we actually have a automatic Autonumber config on the Table - Luis 20210528
        // var inspectionName = glHelper.GetLookupName(formContext, "ovs_inspectionid");
        // glHelper.SetValue(formContext, "ovs_name", inspectionName + " - Safety Assessment");

        //We still need to save on load of a new form so users can start adding violations.
        Xrm.Page.data.entity.save();
    }
    else {

        //Arm all validation on form
        glHelper.SetRequiredLevel(formContext,"ovs_cymagnitudeofharm", true);
        glHelper.SetRequiredLevel(formContext,"ovs_cylikelihoodofharm", true);
        glHelper.SetRequiredLevel(formContext,"ovs_instrumentselection", true);
        glHelper.SetRequiredLevel(formContext,"ovs_justificationetxt", true);
        glHelper.SetRequiredLevel(formContext,"ovs_cyharm", true);
        glHelper.SetRequiredLevel(formContext,"ovs_degreeofnegligence", true);
        glHelper.SetRequiredLevel(formContext,"ovs_offendercompliancehistory", true);
        glHelper.SetRequiredLevel(formContext,"ovs_offendermitigationofharm", true);
        glHelper.SetRequiredLevel(formContext,"ovs_offenderdetectionofcontravention", true);
        glHelper.SetRequiredLevel(formContext,"ovs_offendereconomicbenefit", true);
        glHelper.SetRequiredLevel(formContext,"ovs_offendercooperationwithtc", true);
        glHelper.SetRequiredLevel(formContext, "ovs_overriderecommendation", true);

        CalculatedRiskParameters_OnChange(executionContext);
        
    }

    var statusReason = glHelper.GetValue(formContext,'statuscode');

    if (statusReason == 918640000)
        disableFormFields(executionContext, true);
    else
        disableFormFields(executionContext, false);

}

function disableFormFields(executionContext,flag) {

    var formContext = executionContext.getFormContext();

    formContext.ui.controls.forEach(function (control, i) {

        if (control && control.getDisabled && !control.getDisabled()) {

            control.setDisabled(flag);

        }

    });

}

function getAddExistingFilters(relationshipName, primaryEntityName) {
    if (relationshipName == "qm_cysafetyassessment_syresult" && primaryEntityName == "qm_syresult") {
        return [{
            entityLogicalName: "ovs_cysafetyassessment", filterXml: "<filter type='and'><condition attribute='qm_workorderid' operator='eq' value='" + glHelper.GetLookupAttrId(globalFormContext, "ovs_inspectionid") + "' /><condition attribute='qm_cysafetyassessmentid' operator='null' /></filter>" }]
    }
    if (relationshipName == "qm_cysafetyassessment_syresult" && primaryEntityName == "ovs_cysafetyassessment") {
        return [{ entityLogicalName: "qm_syresult", filterXml: "<filter type='and'><condition attribute='qm_workorderid' operator='eq' value='" + glHelper.GetLookupAttrId(globalFormContext, "ovs_inspectionid") + "' /><condition attribute='qm_cysafetyassessmentid' operator='null' /></filter>" }]
    }
    return null;
}


// Custom function to call instead of the OOTB Add Existing button/command - all 4 parameters can be passed from the ribbon
function filterAddExisting(selectedEntityTypeName, selectedControl, firstPrimaryItemId) {

    var relationshipName = selectedControl.getRelationship().name;
    var primaryEntityName = Xrm.Page.data.entity.getEntityName();

    if (relationshipName == "qm_cysafetyassessment_syresult") {
        var options = {
            allowMultiSelect: true,
            entityTypes: [selectedEntityTypeName],
            showNew: true,
            disableMru: true,
            filters: getAddExistingFilters(relationshipName, primaryEntityName)
        };

        lookupAddExistingRecords(relationshipName, selectedEntityTypeName, primaryEntityName, firstPrimaryItemId, selectedControl, options);
    }
    
}

// relationshipName = the schema name of the N:N or 1:N relationship
// primaryEntity = the 1 in the 1:N or the first entity in the N:N - for N:N this is the entity which was used to create the N:N (may need to trial and error this)
// relatedEntity = the N in the 1:N or the secondary entity in the N:N
// parentRecordId = the guid of the record this subgrid/related entity is used on
// gridControl = the grid control parameter passed from the ribbon context
// lookupOptions = options for creating the custom lookup with filters: http://butenko.pro/2017/11/22/microsoft-dynamics-365-v9-0-lookupobjects-closer-look/
function lookupAddExistingRecords(relationshipName, primaryEntity, relatedEntity, parentRecordId, gridControl, lookupOptions) {
    Xrm.Utility.lookupObjects(lookupOptions).then(function (results) {
        // Get the entitySet name for the primary entity
        Xrm.Utility.getEntityMetadata(primaryEntity).then(function (primaryEntityData) {
            var primaryEntitySetName = primaryEntityData.EntitySetName;

            // Get the entitySet name for the related entity
            Xrm.Utility.getEntityMetadata(relatedEntity).then(function (relatedEntityData) {
                var relatedEntitySetName = relatedEntityData.EntitySetName;

                // Call the associate web api for each result (recursive)
                associateAddExistingResults(relationshipName, primaryEntitySetName, relatedEntitySetName, relatedEntity, parentRecordId.replace("{", "").replace("}", ""), gridControl, results, 0)
            });
        });
    });
}

// Used internally by the above function
function associateAddExistingResults(relationshipName, primaryEntitySetName, relatedEntitySetName, relatedEntity, parentRecordId, gridControl, results, index) {
    if (index >= results.length) {
        // Refresh the grid once completed
        Xrm.Page.ui.setFormNotification("Associated " + index + " record" + (index > 1 ? "s" : ""), "INFO", "associate");
        if (gridControl) { gridControl.refresh(); }

        // Clear the final notification after 2 seconds
        setTimeout(function () {
            Xrm.Page.ui.clearFormNotification("associate");
        }, 2000);

        return;
    }

    Xrm.Page.ui.setFormNotification("Associating record " + (index + 1) + " of " + results.length, "INFO", "associate");

    var lookupId = results[index].id.replace("{", "").replace("}", "");
    var lookupEntity = results[index].entityType || results[index].typename;

    var primaryId = parentRecordId;
    var relatedId = lookupId;
    if (lookupEntity.toLowerCase() != relatedEntity.toLowerCase()) {
        // If the related entity is different to the lookup entity flip the primary and related id's
        primaryId = lookupId;
        relatedId = parentRecordId;
    }

    var association = { '@odata.id': Xrm.Page.context.getClientUrl() + "/api/data/v9.0/" + primaryEntitySetName + "(" + primaryId + ")" };

    var req = new XMLHttpRequest();
    req.open("POST", Xrm.Page.context.getClientUrl() + "/api/data/v9.0/" + relatedEntitySetName + "(" + relatedId + ")/" + relationshipName + "/$ref", true);
    req.setRequestHeader("Accept", "application/json");
    req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
    req.setRequestHeader("OData-MaxVersion", "4.0");
    req.setRequestHeader("OData-Version", "4.0");
    req.onreadystatechange = function () {
        if (this.readyState === 4) {
            req.onreadystatechange = null;
            index++;
            if (this.status === 204 || this.status === 1223) {
                // Success
                // Process the next item in the list
                associateAddExistingResults(relationshipName, primaryEntitySetName, relatedEntitySetName, relatedEntity, parentRecordId, gridControl, results, index);
            }
            else {
                // Error
                var error = JSON.parse(this.response).error.message;
                if (error == "A record with matching key values already exists.") {
                    // Process the next item in the list
                    associateAddExistingResults(relationshipName, primaryEntitySetName, relatedEntitySetName, relatedEntity, parentRecordId, gridControl, results, index);
                }
                else {
                    Xrm.Utility.alertDialog(error);
                    Xrm.Page.ui.clearFormNotification("associate");
                    if (gridControl) { gridControl.refresh(); }
                }
            }
        }
    };
    req.send(JSON.stringify(association));
}

function DisassociateViolation(selectedControl,selectedRows)
{
    var formContext = selectedControl.formContext;

    if (selectedRows != null)
    {
        for (let i = 0; i < selectedRows.length; i++)
        {
            var violation = {};
            violation.qm_cysafetyassessmentid = null;

            var selectedRowId = selectedRows[i];
            var recordId = glHelper.GetCurrentRecordId(formContext).replace("{", "").replace("}","");

            var req = new XMLHttpRequest();
            req.open("DELETE", Xrm.Page.context.getClientUrl() + "/api/data/v9.1/ovs_cysafetyassessments(" + recordId + ")/qm_cysafetyassessment_syresult(" + selectedRowId + ")/$ref", true);
            req.setRequestHeader("Accept", "application/json");
            req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            req.setRequestHeader("OData-MaxVersion", "4.0");
            req.setRequestHeader("OData-Version", "4.0");
            req.onreadystatechange = function ()
            {
                if (this.readyState === 4)
                {
                    req.onreadystatechange = null;
                    if (this.status === 204 || this.status === 1223)
                    {
                        //Success - No Return Data - Do Something
                        selectedControl.refresh();
                    } else
                    {
                        Xrm.Utility.alertDialog(this.statusText);
                    }
                }
            };
            req.send();

        }
    }

}