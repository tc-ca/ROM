<html><head>
    <meta charset="utf-8">
    <title></title>


    <link href="../qm_/Bootstrap/css/bootstrap.min.css" rel="stylesheet" type="text/css">


    <script src="../ClientGlobalContext.js.aspx"></script>
    <script src="../qm_/Scripts/jquery_3.1.1.min.js"></script>
    <script src="../qm_/Bootstrap/js/bootstrap.min.js"></script>

    <style>
    </style>

<meta></head>
<body>

    <div class="input-group" style="margin: 10px 5px 0px 5px;">
        <input type="text" id="search" class="form-control" style="height:36px" placeholder="Type to search">

        <span class="input-group-btn" style="background-color: #f0f0f0;border: solid 1px #b7b7b7;">
            <button class="btn" type="button" style="pointer-events: none;">
                <span class="glyphicon glyphicon glyphicon-search" aria-hidden="true"></span>
            </button>
        </span>
    </div>
    <div class="container-fluid">

        <div class="panel">
            <!-- <div class="panel-heading" id="panel-heading">
               <h3 class="panel-title">Select required specs</h3>

            </div> -->
            <div class="panel-body">
                <div class="row">
                    <div class="col-xs-12">
                        <ul id="lstTarget" class="list-group">
                        </ul>
                    </div>
                </div>
            </div>
            <div class="panel-footer panel-primary text-right">
                <button type="button" id="submitButton" data-loading-text="Loading..." class="btn btn-primary" autocomplete="off">
                    Add
                </button>

                <button type="button" id="cancelButton" class="btn btn-default" aria-pressed="false" autocomplete="off">
                    Cancel
                </button>
            </div>

        </div>
    </div>


    <script>

        var globalContext = Xrm.Utility.getGlobalContext();
        var formContext;
        var gridControl;
        var LCID = 1033;

        var paramsObj = null;

        function addRegs2SR(srId, regIDs)
        {
            var parameters = {};
            parameters.srId = srId;
            parameters.regIDs = regIDs;

            var fdr_AddRegs2SRRequest = {
                srId: parameters.srId,
                regIDs: parameters.regIDs,

                getMetadata: function ()
                {
                    return {
                        boundParameter: null,
                        parameterTypes: {
                            "srId": {
                                "typeName": "Edm.String",
                                "structuralProperty": 1
                            },
                            "regIDs": {
                                "typeName": "Edm.String",
                                "structuralProperty": 1
                            }
                        },
                        operationType: 0,
                        operationName: "fdr_AutoGenerateFunctions"
                    };
                }
            };

            Xrm.WebApi.online.execute(fdr_AddRegs2SRRequest).then(
                function success(result)
                {
                    Xrm.Utility.closeProgressIndicator();

                    if (result.ok)
                    {
                        result.text().then(function (i)
                        {
                            var data = JSON.parse(i);
                            if (data != null || typeof data !== 'undefined')
                            {
                                
                                if ((data.responseString != null)
                                    && typeof data.responseString !== 'undefined')
                                {

                                    if (data.responseString != "")
                                    {
                                        Xrm.Navigation.openErrorDialog({ message: "Something went wrong with adding functions. Error: " + data.responceString });
                                        window.close();
                                    }
                                    else
                                    {

                                        window.close();
                                    }
                                }

                            }
                        }, function (error)
                        {

                            Xrm.Utility.closeProgressIndicator();
                            console.log("add Regs error: " + error.message);
                            Xrm.Navigation.openErrorDialog({ message: "Something went wrong. Error: " + error.message });
                        });

                    }

                },
                function (error)
                {
                    Xrm.Utility.closeProgressIndicator();
                    console.log("addRegs2SR error: " + error.message);
                    Xrm.Navigation.openErrorDialog({ message: "Something went wrong. Error: " + error.message });

                }
            );

        }

        function getRegs(ctId, langId)
        {
            Xrm.Utility.showProgressIndicator("Working ...");

            var parameters = {};
            parameters.langId = langId;
            parameters.ctId = ctId;
            

            var fdr_Regulations4SRRequest = {
                langId: parameters.langId,
                ctId: parameters.ctId,
                

                getMetadata: function ()
                {
                    return {
                        boundParameter: null,
                        parameterTypes: {
                            "langId": {
                                "typeName": "Edm.Int32",
                                "structuralProperty": 1
                            },
                            "ctId": {
                                "typeName": "Edm.String",
                                "structuralProperty": 1
                            }
                        },
                        operationType: 0,
                        operationName: "fdr_ListContainerFunctions"
                    };
                }
            };

            Xrm.WebApi.online.execute(fdr_Regulations4SRRequest).then(
                function success(result)
                {
                    Xrm.Utility.closeProgressIndicator();

                    if (result.ok)
                    {
                        result.text().then(function (i)
                        {
                            var data = JSON.parse(i);
                            if (data != null || typeof data !== 'undefined')
                            {

                                if ((data.listOfFunctions != null)
                                    && typeof data.listOfFunctions !== 'undefined')
                                {
                                   
                                    $('#lstTarget').html(data.listOfFunctions);

                                }

                            }
                        }, function (error)
                        {

                            Xrm.Utility.closeProgressIndicator();
                            console.log("Regs error: " + error.message);
                            Xrm.Navigation.openErrorDialog({ message: "Something went wrong. Error: " + error.message });
                        });

                    }

                },
                function (error)
                {
                    Xrm.Utility.closeProgressIndicator();
                    console.log("Regs2SR error: " + error.message);
                    Xrm.Navigation.openErrorDialog({ message: "Something went wrong. Error: " + error.message });

                }
            );
        }

        //sdk function modified
        function getDataParam()
        {

            var vals = new Array();
            if (location.search != "")
            {
                vals = location.search.substr(1).split("&");
                for (var i in vals)
                {
                    vals[i] = vals[i].replace(/\+/g, " ").split("=");
                }
                //look for the parameter named 'data'
                var dataObj = null;
                for (var i in vals)
                {
                    if (vals[i][0].toLowerCase() == "data")
                    {
                        dataObj = parseDataValue(vals[i][1]);
                        found = true;
                        break;
                    } else
                    {

                        //notify user - params weren't found
                        Xrm.Navigation.openErrorDialog({ message: "Regulatory Requirements could not be fetched due to the parameters error" });
                        return null;
                    }
                }

                if (dataObj != null) return dataObj;
                else
                {

                    //notify user - params couldn't be parsed
                    Xrm.Navigation.openErrorDialog({ message: "Regulatory Requirements could not be fetched due to the parameters parsing error" });
                    return null;
                }
            }
            else
            {
                //notify user - params are missing
                return null;
                Xrm.Navigation.openErrorDialog({ message: "Regulatory Requirements could not be fetched due to absence of required parameters" });
            }
        }

        //sdk function modified
        function parseDataValue(datavalue)
        {

            if (datavalue != "")
            {
                var vals = new Array();

                vals = decodeURIComponent(datavalue).split("&");
                for (var i in vals)
                {
                    vals[i] = vals[i].replace(/\+/g, " ").split("=");
                }

                return JSON.parse(vals[0][0]);
                ////Loop through vals and create rows for the table
                //for (var i in vals) {
                //    var c1 = vals[i][0];
                //}

            }
            return null;
        }


        $(document).ready(function ()
        {

            var userSettings = globalContext.userSettings;
            LCID = userSettings.languageId;

            //if (LCID == 1033)
            //    resexResourceName = "?.1033.resx";
            //else if (LCID == 1036)
            //    resexResourceName = "?.1036.resx";

            //$('#lblTitle').text(Xrm.Utility.getResourceString(resexResourceName, ""));


            //get params
            var paramsObj = getDataParam();

            if (paramsObj != null) getRegs(paramsObj.ctId, paramsObj.langId);

            $('#submitButton').on('click', function ()
            {
                var $btn = $(this).button('loading')

                //get selected check boxes
                var selected = [];
                var count = $("input:checked").length;

                if (count == 0)
                {

                    var alertStrings = { confirmButtonLabel: "Yes", text: "Please, check at least one Regulatory Requirement" };
                    Xrm.Navigation.openAlertDialog(alertStrings);
                }
                else
                {
                    $("input:checked").each(function ()
                    {

                        selected.push($(this).attr('id'));
                    });
                }

                //send to assign
                paramsObj.selected = selected.join(';');
                //call castom action
                addRegs2SR(paramsObj.srId, paramsObj.selected);
                $btn.button('reset');
            })

            $('#cancelButton').on('click', function ()
            {

                window.close();
            })

            $("#lstTarget").on("change", ":checkbox", function (event)
            {

                if (event.target.checked)
                {
                    $("#icon-" + event.target.id).addClass("glyphicon glyphicon-ok");

                } else
                {
                    $("#icon-" + event.target.id).removeClass("glyphicon glyphicon-ok");
                }

            });


            $("#search").on("keyup", function ()
            {
                var value = this.value.toLowerCase().trim();
                $("#lstTarget div").show().filter(function ()
                {
                    return $(this).text().toLowerCase().trim().indexOf(value) == -1;
                }).hide();
            });
        });


    </script>


</body></html>