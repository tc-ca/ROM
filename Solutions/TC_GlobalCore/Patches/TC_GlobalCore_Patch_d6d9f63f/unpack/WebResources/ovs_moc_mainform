///<reference path="../../Utilities/GlobalHelper.js"/>
///<reference path="../../Utilities/RNOP_ValidationFunctions.js"/>


var Operation_main = (function (window, document) {


    var globalFormContext;
    var globalContext;
    const FIELD_SITE = "ovs_siteid";
    const FIELD_OPERATION_TYPE = "ovs_operationtype";
    const FIELD_MOC_REGISTRATION_ID = "ovs_mocregistrationname";
    const FIELD_MOC_FACILITY_TYPE = "ovs_operationfacilitytype";
    const FIELD_MOC_REGISTRATION_EXPIRY_DATE = "ovs_registrationexpiry";
    const FIELD_MOC_REGISTRATION_INITIAL_DATE = "ovs_mocinitialregistrationdate";
    const FIELD_HUB_INDICATOR = "ovs_hubind";
    const FIELD_TARGETED_INDICATOR = "ovs_targetedind";
    const FIELD_ACCIDENT_INDICATOR = "ovs_accidentind";
    const FIELD_CEP_INDICATOR = "ovs_cepind";
    const FIELD_FOLLOW_UP_INDICATOR = "ovs_followupind";
    const FIELD_RISK_SCORE = "ovs_cdriskscore";


    const VALUE_HOTI = 918640038;
    const VALUE_HOTI_GOA = 918640042;
    const VALUE_CIV_AV = 918640040;


    function setFieldPermissions(formContext) {

        var isManager = glHelper.hasCurrentUserRole("TDG Manager");
        var isPlanner = glHelper.hasCurrentUserRole("TDG Planner");
        var isInspector = glHelper.hasCurrentUserRole("TDG Inspector");


        glHelper.SetDisabled(formContext, FIELD_HUB_INDICATOR, !isManager);
        glHelper.SetDisabled(formContext, FIELD_FOLLOW_UP_INDICATOR, !isManager);

        glHelper.SetDisabled(formContext, FIELD_ACCIDENT_INDICATOR, !isPlanner);
        glHelper.SetDisabled(formContext, FIELD_CEP_INDICATOR, !isPlanner);
        glHelper.SetDisabled(formContext, FIELD_TARGETED_INDICATOR, !isPlanner);

        glHelper.SetDisabled(formContext, FIELD_FOLLOW_UP_INDICATOR, !isPlanner);
        glHelper.SetDisabled(formContext, FIELD_FOLLOW_UP_INDICATOR, !isManager);
        glHelper.SetDisabled(formContext, FIELD_FOLLOW_UP_INDICATOR, isInspector);

    }

    function toggleRequiredLevel(formContext) {
        var operationType = glHelper.GetValue(formContext, FIELD_OPERATION_TYPE);
        var fieldsRequired = true;

        if (operationType == VALUE_CIV_AV || operationType == VALUE_HOTI || operationType == VALUE_HOTI_GOA)
            fieldsRequired = false;

        glHelper.SetRequiredLevel(formContext, FIELD_SITE, true);
        glHelper.SetRequiredLevel(formContext, FIELD_OPERATION_TYPE, fieldsRequired);
        //glHelper.SetRequiredLevel(formContext, FIELD_MOC_FACILITY_TYPE, fieldsRequired);
        glHelper.SetRequiredLevel(formContext, FIELD_MOC_REGISTRATION_EXPIRY_DATE, fieldsRequired);
        glHelper.SetRequiredLevel(formContext, FIELD_MOC_REGISTRATION_ID, fieldsRequired);
        glHelper.SetRequiredLevel(formContext, FIELD_MOC_REGISTRATION_INITIAL_DATE, fieldsRequired);

    }

    return {

        OnLoad: function (executionContext) {
            //get context
            globalContext = glHelper.getGlobalContext();
            var formContext = executionContext.getFormContext();
            globalFormContext = formContext;

            // 0 = Undefined, 1 = Create, 2 = Update, 3 = Read Only, 4 = Disabled, 6 = Bulk Edit
            let formType = glHelper.GetFormType(formContext);

            //check if there is a site associated with current operation
            var accountid = glHelper.GetLookupAttrId(formContext, FIELD_SITE);
            if (accountid == null)
                Xrm.Navigation.openAlertDialog({ confirmButtonLabel: "OK", text: "No Site is associated with current operation" });
            

            //Toggle required level based on Operation Type
            toggleRequiredLevel(formContext);

            setFieldPermissions(formContext);

            //Add function to Refresh Operation Class when UNCode is added
            if (formType > 1) {
                var OperationUN = formContext.getControl("Subgrid_OperationUNNumber");
                if (OperationUN != null) OperationUN.addOnLoad(Operation_main.Refresh_OperationClass);
            }

            var operationType = formContext.getAttribute("ovs_operationtype");
            operationType.removeOnChange(Operation_main.OperationType_OnChange);
            operationType.addOnChange(Operation_main.OperationType_OnChange);

            formContext.data.entity.removeOnSave(Operation_main.OnSave);
            formContext.data.entity.addOnSave(Operation_main.OnSave);
             

        },

        Refresh_OperationClass: function () {

            var OperationClass = globalFormContext.getControl("grd_Class");
            if (OperationClass != null) OperationClass.refresh();
        },

        OperationType_OnChange: function (executionContext) {

            var formContext = executionContext.getFormContext();
            toggleRequiredLevel(formContext);
        },

         OnSave: function (executionContext) {

             var formContext = executionContext.getFormContext();
             let formType = glHelper.GetFormType(formContext);
             var accountid = glHelper.GetLookupAttrId(formContext, FIELD_SITE);
           
             // 0 = Undefined, 1 = Create, 2 = Update, 3 = Read Only, 4 = Disabled, 6 = Bulk Edit

             if (formType == 1 && accountid == null) {

                 glHelper.DisplayFormNotification("No Site is associated with current operation", "ERROR", 5000);
                 executionContext.getEventArgs().preventDefault();//will prevent CRM form save
                 return;
             }
            
        }

    }

})(window, document)