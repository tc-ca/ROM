///<reference path="../../Utilities/GlobalHelper.js"/>
///<reference path="../../Utilities/questionnaireFunctions.js"/>

var Candidates_TDG_main = (function (window, document) {

    // constants
    const FIELD_OPERATION_ID = "ovs_operationid";
    const FIELD_RISK_SCORE = "ovs_cdriskscore";
    const FIELD_RISK_CATEGORY = "ovs_cdriskcategory";
    const FIELD_RISK_PRIORITY_SCORE = "ovs_cdpriorityscore";


    //variables
    var LCID;
    var clientUrl;
    var resexResourceName;
    var currentWebApi;
    var isOffLine;
    var clientType;
    var oat = new Array("GC Targeted", "GC CEP", "GC Follow-up", "MOC Follow-up","MOC Targeted" );
    var formType;

    //********************private methods*******************

    function isJustificationMandatory(formContext, oversightTypeId) {


        if (glHelper.GetValue(formContext, "ovs_cdpriorityscore") >= 100.00) {

            //TO DO: Localize if design approved
            var message = "The Priority Score is above a threshold. Record cannot be remove without replacement.";

            glHelper.SetRequiredLevel(formContext, "ovs_justification", true);
            Xrm.Navigation.openAlertDialog({ confirmButtonLabel: "OK", text: message });

        }
        else {
            if (oversightTypeId != null)
                currentWebApi.retrieveRecord("ovs_oversighttype", oversightTypeId, "?$select=ovs_oversighttypenameenglish").then(
                    function success(result) {
                        var isReq = false;
                        var nameenglish = result["ovs_oversighttypenameenglish"];
                        var x = nameenglish.trim().toLowerCase();
                        for (var i = 0; i < oat.length; i++) {
                            if (x.indexOf(oat[i].toLowerCase()) > -1) {
                                isReq = true;
                                break;
                            }
                        }
                        if (isReq) glHelper.SetRequiredLevel(formContext, "ovs_justification", true);
                        else glHelper.SetRequiredLevel(formContext, "ovs_justification", false);
                    },
                    function (error) {

                        glHelper.SetRequiredLevel(formContext, "ovs_justification", false);
                        console.log("isJustificationMandatory error: " + error.message);
                        Xrm.Navigation.openErrorDialog({ message: error.message });
                    }
                );
            else glHelper.SetRequiredLevel(formContext, "ovs_justification", false);
        }
    }

    function processRevisedQuorter(formContext, opId) {

        //get revised quarter by name and id
        var req = new XMLHttpRequest();
        req.open("GET", clientUrl + "/api/data/v9.2/ovs_mocregistrations?$select=ovs_cdriskscore,ovs_cdriskcategory,ovs_cdpriorityscore&$filter=ovs_name eq '" + opId + "'");
        req.setRequestHeader("OData-MaxVersion", "4.0");
        req.setRequestHeader("OData-Version", "4.0");
        req.setRequestHeader("Accept", "application/json");
        req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        req.onreadystatechange = function () {
            if (this.readyState === 4) {
                
                req.onreadystatechange = null;
                if (this.status === 200) {
                    var results = JSON.parse(this.response);
                    var risk_score = results.value[0]["ovs_cdriskscore"];
                    var risk_category = results.value[0]["ovs_cdriskcategory"];
                    var priority_score = results.value[0]["ovs_cdpriorityscore"];

                    glHelper.SetValue(formContext, FIELD_RISK_SCORE, risk_score);
                    glHelper.SetValue(formContext, FIELD_RISK_CATEGORY, risk_category);
                    glHelper.SetValue(formContext, FIELD_RISK_PRIORITY_SCORE, priority_score);
                }
                else {
                    Xrm.Navigation.openErrorDialog({ message: this.statusText });
                }
            }
        };

        req.send();
    }

    //********************private methods end***************

    //********************public methods***************
    return {

        OnLoad: function (executionContext) {

            var globalContext = Xrm.Utility.getGlobalContext();
            var formContext = executionContext.getFormContext();
            formType = glHelper.GetFormType(formContext);

            isOffLine = glHelper.isOffline(executionContext);
            clientType = glHelper.getClientType(executionContext);

            if (isOffLine && clientType > 0) {

                //mobile or outlook, offline first
                currentWebApi = Xrm.WebApi.offline;
                clientUrl = "https://localhost:2525";
            }
            else {

                //web, online
                currentWebApi = Xrm.WebApi.online;
                clientUrl = globalContext.getClientUrl();
            }


            //planning status
            var planningstatus = formContext.getAttribute("ovs_planningstatus");
            planningstatus.removeOnChange(Candidates_TDG_main.PlanningStatus_Change);
            planningstatus.addOnChange(Candidates_TDG_main.PlanningStatus_Change);


            var oversighttype = formContext.getAttribute("ovs_oversighttype");
            oversighttype.removeOnChange(Candidates_TDG_main.ActivityType_OnCahnge);
            oversighttype.addOnChange(Candidates_TDG_main.ActivityType_OnCahnge);
            

            var operationId = formContext.getAttribute(FIELD_OPERATION_ID);
            operationId.removeOnChange(Candidates_TDG_main.OperationId_OnChange);
            operationId.addOnChange(Candidates_TDG_main.OperationId_OnChange);

            if (formType > 1) {
                planningstatus.fireOnChange();
            }
        },

        PlanningStatus_Change: function (executionContext) {

            var formContext = executionContext.getFormContext();
            //if replaced
            if (glHelper.GetOptionsetValue(formContext, "ovs_planningstatus") == 918640001) {
                //validate if justification is required
                var ovesightTypeId = glHelper.GetValue(formContext, "ovs_oversighttype")[0]
                    ? glHelper.GetLookupAttrId(formContext, "ovs_oversighttype").replace('{', '').replace('}', '')
                    : null;
                isJustificationMandatory(formContext, ovesightTypeId);
            } else glHelper.SetRequiredLevel(formContext, "ovs_justification", false);

        },

        OperationId_OnChange: function (executionContext) {

            var formContext = executionContext.getFormContext();
            var op = glHelper.GetValue(formContext, FIELD_OPERATION_ID);
            if (op === "") {
                glHelper.SetValue(formContext, FIELD_RISK_SCORE, null);
                glHelper.SetValue(formContext, FIELD_RISK_CATEGORY, null);
                glHelper.SetValue(formContext, FIELD_RISK_PRIORITY_SCORE, null);
                return;
            }
            processRevisedQuorter(formContext, op[0].name);
        },

        ActivityType_OnCahnge: function (executionContext) {

            var formContext = executionContext.getFormContext();

            if (glHelper.GetValue(formContext, "ovs_oversighttype")[0]) {
                var planningstatus = formContext.getAttribute("ovs_planningstatus");
                planningstatus.fireOnChange();
            }
        },
    }


    //********************public methods end***************

})(window, document)
