trigger:
- none

pr:
- none

variables:
- group: ROMPipelineBaseVariables

stages:
- stage: BuildAndPublishArtifact
  pool:
      vmImage: 'vs2017-win2016'
  jobs:
  - job: BuildAndPublishArtifact
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host $(Agent.JobName)
          Write-Host ${env:CONNECTIONSTRINGACCTDG}
          Write-Host ${env:CONNECTIONSTRINGDEV}
          Write-Host ${env:CONNECTIONSTRINGQA}
          Write-Host ${env:CORESOLUTIONNAME}
          Write-Host ${env:FLOWSSOLUTIONNAME}
          Write-Host ${env:TDGFLOWSSOLUTIONNAME}
          Write-Host ${env:TCCUSTOMACTIONSSOLUTIONNAME}
          Write-Host ${env:TDGPLUGINSSOLUTIONNAME}
          Write-Host ${env:TDGPOWERAPPSSOLUTIONNAME}
          Write-Host ${env:TCCRMBASESOLUTIONNAME}

          if (([string]::IsNullOrEmpty(${env:CONNECTIONSTRINGACCTDG})) -and 
              ([string]::IsNullOrEmpty(${env:CONNECTIONSTRINGDEV})) -and
              ([string]::IsNullOrEmpty(${env:CONNECTIONSTRINGQA})) -and
              ([string]::IsNullOrEmpty(${env:CORESOLUTIONNAME})) -and
              ([string]::IsNullOrEmpty(${env:FLOWSSOLUTIONNAME})) -and
              ([string]::IsNullOrEmpty(${env:TDGFLOWSSOLUTIONNAME})) -and
              ([string]::IsNullOrEmpty(${env:TCCUSTOMACTIONSSOLUTIONNAME})) -and
              ([string]::IsNullOrEmpty(${env:TDGPLUGINSSOLUTIONNAME})) -and
              ([string]::IsNullOrEmpty(${env:TDGPOWERAPPSSOLUTIONNAME})) -and
              ([string]::IsNullOrEmpty(${env:TCCRMBASESOLUTIONNAME})))
          {
              throw "Variable check failed."
          }
          else {
              Write-Host "Variable check succeeded"
          }
        failOnStderr: true
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "============================================"
          Write-Host "System.DefaultWorkingDirectory"
          Get-ChildItem -Path "$(System.DefaultWorkingDirectory)"
          Write-Host "============================================"
          Write-Host "Agent.BuildDirectory"
          Get-ChildItem -Path "$(Agent.BuildDirectory)"
          Write-Host "============================================"
          Write-Host ""
          Write-Host "============================================"
          Write-Host "Build.ArtifactStagingDirectory"
          Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)"
          Write-Host "============================================"
          Write-Host "============================================"
          Write-Host "Build.BinariesDirectory"
          Get-ChildItem -Path "$(Build.BinariesDirectory)"
          Write-Host "============================================"
          Write-Host "============================================"
          Write-Host "Build.SourcesDirectory"
          Get-ChildItem -Path "$(Build.SourcesDirectory)"
          Write-Host "============================================"
        errorActionPreference: 'continue'
    - task: DeleteFiles@1
      inputs:
        SourceFolder: '$(Build.ArtifactStagingDirectory)'
        Contents: |
          **
          **/*
    - task: MSCRMToolInstaller@12
      inputs:
        nugetFeed: 'official'
        psFeed: 'official'
    - task: MSCRMPublishCustomizations@12
      inputs:
        crmConnectionString: '$(ConnectionStringDev)'
        crmConnectionTimeout: '999'
    - task: MSCRMExportSolution@12
      inputs:
        crmConnectionString: '$(ConnectionStringDev)'
        solutionName: '$(TCCRMBaseSolutionName)'
        exportManaged: true
        exportUnmanaged: true
        includeVersionInSolutionFile: true
        outputPath: '$(Build.ArtifactStagingDirectory)'
        crmConnectionTimeout: '1960'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
    - powershell: |
        If(!(test-path '$(Build.SourcesDirectory)\Solutions\$(TCCRMBaseSolutionName)'))
        {
          Write-Host "$(Build.SourcesDirectory)\Solutions\$(TCCRMBaseSolutionName) folder does not exists."
          New-Item -ItemType Directory -Force -Path '$(Build.SourcesDirectory)\Solutions\$(TCCRMBaseSolutionName)'
          Write-Host "$(Build.SourcesDirectory)\Solutions\$(TCCRMBaseSolutionName) folder created."
        }
        Copy-item -Force -Recurse -Verbose $(Build.ArtifactStagingDirectory)\* -Destination $(Build.SourcesDirectory)\Solutions\$(TCCRMBaseSolutionName)
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "============================================"
          Write-Host "System.DefaultWorkingDirectory"
          Get-ChildItem -Path "$(System.DefaultWorkingDirectory)"
          Write-Host "============================================"
          Write-Host "Agent.BuildDirectory"
          Get-ChildItem -Path "$(Agent.BuildDirectory)"
          Write-Host "============================================"
          Write-Host ""
          Write-Host "============================================"
          Write-Host "Build.ArtifactStagingDirectory"
          Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)"
          Write-Host "============================================"
          Write-Host "============================================"
          Write-Host "Build.BinariesDirectory"
          Get-ChildItem -Path "$(Build.BinariesDirectory)"
          Write-Host "============================================"
          Write-Host "============================================"
          Write-Host "Build.SourcesDirectory"
          Get-ChildItem -Path "$(Build.SourcesDirectory)"
          Write-Host "============================================"
        errorActionPreference: 'continue'
    - powershell: |
        echo "Committing all CDS solution changes"
        git config user.email "nepasrepondre-noreply@tc.gc.ca"
        git config user.name "tc-buildbot"
        git checkout development
        git add --all
        git commit -m "Update Solution - $env:TCCRMBASESOLUTIONNAME: $env:COMMITMESSAGE"
        
        echo "Push solution changes to the remote repository"
        git -c http.extraheader="AUTHORIZATION: basic $(System.AccessToken)" push --force origin development
- stage: Dev2
  jobs:
  - deployment: Deploy
    condition: succeeded()
    pool:
      vmImage: 'vs2017-win2016'
    environment: DEV-TDG
    strategy:
      runOnce:
        deploy:
          steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "============================================"
                Write-Host "System.DefaultWorkingDirectory"
                Get-ChildItem -Path "$(System.DefaultWorkingDirectory)"
                Write-Host "============================================"
                Write-Host "Agent.BuildDirectory"
                Get-ChildItem -Path "$(Agent.BuildDirectory)"
                Write-Host "============================================"
                Write-Host ""
                Write-Host "============================================"
                Write-Host "Build.ArtifactStagingDirectory"
                Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)"
                Write-Host "============================================"
                Write-Host "============================================"
                Write-Host "Build.BinariesDirectory"
                Get-ChildItem -Path "$(Build.BinariesDirectory)"
                Write-Host "============================================"
                Write-Host "============================================"
                Write-Host "Build.SourcesDirectory"
                Get-ChildItem -Path "$(Build.SourcesDirectory)"
                Write-Host "============================================"
              errorActionPreference: 'continue'
          - task: MSCRMToolInstaller@12
            inputs:
              nugetFeed: 'official'
              psFeed: 'official'
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                #extract version number from filename and create new devops variable with an incremented version
                $solutionPath = "$(Agent.BuildDirectory)\drop"
                Write-Output "solutionpath = $solutionPath"
                $managedFile = Get-ChildItem -Path $solutionPath -Recurse -File -Filter "*${env:TCCRMBASESOLUTIONNAME}*managed*" | Sort-Object LastWriteTime -Descending | Select-Object -first 1
                Write-Output "file = $managedFile"
                $Inputstring = $managedFile.BaseName + $managedFile.Extension
                Write-Output "input string = $Inputstring"
                $Inputstring -match "_([0-9]_[0-9]_[0-9]_[0-9]+)_"
                $version = "$($matches[1])"
                Write-Output "version = $version"
                Write-Host "##vso[task.setvariable variable=SolutionVersion]$version"
                                                
                #create next version
                $versionParts = $version.Split("_")
                                                
                $major = "$($versionParts[0])"
                $minor = "$($versionParts[1])"
                $build = "$($versionParts[2])"
                $revision = "$($versionParts[3])"
                                                
                [int]$nextRevision = 0
                [bool]$result = [int]::TryParse($revision, [ref]$nextRevision)
                $nextRevision = $nextRevision + 1
                [string]$nextVersion = "$major.$minor.$build.$nextRevision"
                                                
                Write-Output  "major = $major"
                Write-Output  "minor = $minor"
                Write-Output  "build = $build"
                Write-Output  "revision = $revision"
                Write-Output  "nextVersion = $nextVersion"
                Write-Host "##vso[task.setvariable variable=NextSolutionVersion]$nextVersion"

                #get the patch name from the solution zip file
                $managedFile -match "(?<content>.*)_$version"
                $SolutionFileName = $matches['content']
                Write-Output  "SolutionFileName = $SolutionFileName"
                Write-Host "##vso[task.setvariable variable=SolutionFileName]$SolutionFileName"
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "============================================"
                $CoreSolutionName = "${env:TCCRMBASESOLUTIONNAME}"
                $NextSolutionVersion = "$(NextSolutionVersion)"
                $SolutionFileName = "$(SolutionFileName)"

                Write-Output "CoreSolutionName = $CoreSolutionName"
                Write-Output "NextSolutionVersion = $NextSolutionVersion"
                Write-Output "SolutionFileName = $SolutionFileName"

                if ([string]::IsNullOrEmpty($CoreSolutionName) -or [string]::IsNullOrEmpty($NextSolutionVersion) -or [string]::IsNullOrEmpty($SolutionFileName))
                {
                    throw "Variable check failed."
                }
              failOnStderr: true
          - task: MSCRMImportSolution@12
            inputs:
              crmConnectionString: '$(ConnectionStringDev2)'
              solutionFile: '$(Agent.BuildDirectory)\drop\$(SolutionFileName)_$(SolutionVersion).zip'
              publishWorkflows: true
          - task: MSCRMPublishCustomizations@12
            inputs:
              crmConnectionString: '$(ConnectionStringDev2)'
              crmConnectionTimeout: '999'
- stage: QA
  jobs:
  - deployment: Deploy
    condition: succeeded()
    pool:
      vmImage: 'vs2017-win2016'
    environment: QA-TDG
    strategy:
      runOnce:
        deploy:
          steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "============================================"
                Write-Host "System.DefaultWorkingDirectory"
                Get-ChildItem -Path "$(System.DefaultWorkingDirectory)"
                Write-Host "============================================"
                Write-Host "Agent.BuildDirectory"
                Get-ChildItem -Path "$(Agent.BuildDirectory)"
                Write-Host "============================================"
                Write-Host ""
                Write-Host "============================================"
                Write-Host "Build.ArtifactStagingDirectory"
                Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)"
                Write-Host "============================================"
                Write-Host "============================================"
                Write-Host "Build.BinariesDirectory"
                Get-ChildItem -Path "$(Build.BinariesDirectory)"
                Write-Host "============================================"
                Write-Host "============================================"
                Write-Host "Build.SourcesDirectory"
                Get-ChildItem -Path "$(Build.SourcesDirectory)"
                Write-Host "============================================"
              errorActionPreference: 'continue'
          - task: MSCRMToolInstaller@12
            inputs:
              nugetFeed: 'official'
              psFeed: 'official'
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                #extract version number from filename and create new devops variable with an incremented version
                $solutionPath = "$(Agent.BuildDirectory)\drop"
                Write-Output "solutionpath = $solutionPath"
                $managedFile = Get-ChildItem -Path $solutionPath -Recurse -File -Filter "*${env:TCCRMBASESOLUTIONNAME}*managed*" | Sort-Object LastWriteTime -Descending | Select-Object -first 1
                Write-Output "file = $managedFile"
                $Inputstring = $managedFile.BaseName + $managedFile.Extension
                Write-Output "input string = $Inputstring"
                $Inputstring -match "_([0-9]_[0-9]_[0-9]_[0-9]+)_"
                $version = "$($matches[1])"
                Write-Output "version = $version"
                Write-Host "##vso[task.setvariable variable=SolutionVersion]$version"
                                                
                #create next version
                $versionParts = $version.Split("_")
                                                
                $major = "$($versionParts[0])"
                $minor = "$($versionParts[1])"
                $build = "$($versionParts[2])"
                $revision = "$($versionParts[3])"
                                                
                [int]$nextRevision = 0
                [bool]$result = [int]::TryParse($revision, [ref]$nextRevision)
                $nextRevision = $nextRevision + 1
                [string]$nextVersion = "$major.$minor.$build.$nextRevision"
                                                
                Write-Output  "major = $major"
                Write-Output  "minor = $minor"
                Write-Output  "build = $build"
                Write-Output  "revision = $revision"
                Write-Output  "nextVersion = $nextVersion"
                Write-Host "##vso[task.setvariable variable=NextSolutionVersion]$nextVersion"

                #get the patch name from the solution zip file
                $managedFile -match "(?<content>.*)_$version"
                $SolutionFileName = $matches['content']
                Write-Output  "SolutionFileName = $SolutionFileName"
                Write-Host "##vso[task.setvariable variable=SolutionFileName]$SolutionFileName"
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "============================================"
                $CoreSolutionName = "${env:TCCRMBASESOLUTIONNAME}"
                $NextSolutionVersion = "$(NextSolutionVersion)"
                $SolutionFileName = "$(SolutionFileName)"

                Write-Output "CoreSolutionName = $CoreSolutionName"
                Write-Output "NextSolutionVersion = $NextSolutionVersion"
                Write-Output "SolutionFileName = $SolutionFileName"

                if ([string]::IsNullOrEmpty($CoreSolutionName) -or [string]::IsNullOrEmpty($NextSolutionVersion) -or [string]::IsNullOrEmpty($SolutionFileName))
                {
                    throw "Variable check failed."
                }
              failOnStderr: true
          - task: MSCRMImportSolution@12
            inputs:
              crmConnectionString: '$(ConnectionStringQa)'
              solutionFile: '$(Agent.BuildDirectory)\drop\$(SolutionFileName)_$(SolutionVersion)_managed.zip'
              publishWorkflows: true
              overwriteUnmanagedCustomizations: true
              override: true
          - task: MSCRMPublishCustomizations@12
            inputs:
              crmConnectionString: '$(ConnectionStringQa)'
              crmConnectionTimeout: '999'
- stage: ACCTDG
  jobs:
  - deployment: Deploy
    condition: succeeded()
    pool:
      vmImage: 'vs2017-win2016'
    environment: ACC-TDG
    strategy:
      runOnce:
        deploy:
          steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "============================================"
                Write-Host "System.DefaultWorkingDirectory"
                Get-ChildItem -Path "$(System.DefaultWorkingDirectory)"
                Write-Host "============================================"
                Write-Host "Agent.BuildDirectory"
                Get-ChildItem -Path "$(Agent.BuildDirectory)"
                Write-Host "============================================"
                Write-Host ""
                Write-Host "============================================"
                Write-Host "Build.ArtifactStagingDirectory"
                Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)"
                Write-Host "============================================"
                Write-Host "============================================"
                Write-Host "Build.BinariesDirectory"
                Get-ChildItem -Path "$(Build.BinariesDirectory)"
                Write-Host "============================================"
                Write-Host "============================================"
                Write-Host "Build.SourcesDirectory"
                Get-ChildItem -Path "$(Build.SourcesDirectory)"
                Write-Host "============================================"
              errorActionPreference: 'continue'
          - task: MSCRMToolInstaller@12
            inputs:
              nugetFeed: 'official'
              psFeed: 'official'
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                #extract version number from filename and create new devops variable with an incremented version
                $solutionPath = "$(Agent.BuildDirectory)\drop"
                Write-Output "solutionpath = $solutionPath"
                $managedFile = Get-ChildItem -Path $solutionPath -Recurse -File -Filter "*${env:TCCRMBASESOLUTIONNAME}*managed*" | Sort-Object LastWriteTime -Descending | Select-Object -first 1
                Write-Output "file = $managedFile"
                $Inputstring = $managedFile.BaseName + $managedFile.Extension
                Write-Output "input string = $Inputstring"
                $Inputstring -match "_([0-9]_[0-9]_[0-9]_[0-9]+)_"
                $version = "$($matches[1])"
                Write-Output "version = $version"
                Write-Host "##vso[task.setvariable variable=SolutionVersion]$version"
                                                
                #create next version
                $versionParts = $version.Split("_")
                                                
                $major = "$($versionParts[0])"
                $minor = "$($versionParts[1])"
                $build = "$($versionParts[2])"
                $revision = "$($versionParts[3])"
                                                
                [int]$nextRevision = 0
                [bool]$result = [int]::TryParse($revision, [ref]$nextRevision)
                $nextRevision = $nextRevision + 1
                [string]$nextVersion = "$major.$minor.$build.$nextRevision"
                                                
                Write-Output  "major = $major"
                Write-Output  "minor = $minor"
                Write-Output  "build = $build"
                Write-Output  "revision = $revision"
                Write-Output  "nextVersion = $nextVersion"
                Write-Host "##vso[task.setvariable variable=NextSolutionVersion]$nextVersion"

                #get the patch name from the solution zip file
                $managedFile -match "(?<content>.*)_$version"
                $SolutionFileName = $matches['content']
                Write-Output  "SolutionFileName = $SolutionFileName"
                Write-Host "##vso[task.setvariable variable=SolutionFileName]$SolutionFileName"
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "============================================"
                $CoreSolutionName = "${env:TCCRMBASESOLUTIONNAME}"
                $NextSolutionVersion = "$(NextSolutionVersion)"
                $SolutionFileName = "$(SolutionFileName)"

                Write-Output "CoreSolutionName = $CoreSolutionName"
                Write-Output "NextSolutionVersion = $NextSolutionVersion"
                Write-Output "SolutionFileName = $SolutionFileName"

                if ([string]::IsNullOrEmpty($CoreSolutionName) -or [string]::IsNullOrEmpty($NextSolutionVersion) -or [string]::IsNullOrEmpty($SolutionFileName))
                {
                    throw "Variable check failed."
                }
              failOnStderr: true
          - task: MSCRMImportSolution@12
            inputs:
              crmConnectionString: '$(ConnectionStringAccTdg)'
              solutionFile: '$(Agent.BuildDirectory)\drop\$(SolutionFileName)_$(SolutionVersion)_managed.zip'
              publishWorkflows: true
              overwriteUnmanagedCustomizations: true
              override: true
          - task: MSCRMPublishCustomizations@12
            inputs:
              crmConnectionString: '$(ConnectionStringAccTdg)'
              crmConnectionTimeout: '999'