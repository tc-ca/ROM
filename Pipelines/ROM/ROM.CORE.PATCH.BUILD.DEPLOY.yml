trigger:
- none

pr:
- none

stages:
- stage: BuildAndPublishArtifact
  jobs:
  - job: BuildAndPublishArtifact
  pool:
    vmImage: 'vs2017-win2016'
    steps:
    - task: MSCRMToolInstaller@12
      inputs:
        nugetFeed: 'official'
        psFeed: 'official'
    - task: MSCRMGetLatestPatch@12
      name: GetLatestPatchTask
      inputs:
        crmConnectionString: '$(ConnectionStringDev)'
        solutionName: '$(CoreSolutionName)'
        existsVariableName: 'PatchExists'
        patchVariableName: 'LatestPatchName'
    - powershell: |
        Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.PatchExists]$(PatchExists)"
        Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.LatestPatchName]$(LatestPatchName)"
        Write-Host "Patch Exists =  $(PatchExists)"
        Write-Host "Latest Patch Name =  $(LatestPatchName)"
        Write-Host "${{ eq('$(PatchExists)', 'False') }}"
        Write-Host variables['task.GetLatestPatchTask.PatchExists']
    - task: MSCRMGetSolutionMissingDependencies@12
      inputs:
        crmConnectionString: '$(ConnectionStringDev)'
        solutionName: '$(LatestPatchName)'
        warnIfMissing: true
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)\$(LatestPatchName)_managed.zip'
        artifact: 'TC_GlobalCore Managed Patch'
        publishLocation: 'pipeline'
    - powershell: |
        If(!(test-path '$(Build.SourcesDirectory)\solutions'))
        {
          Write-Host "$(Build.SourcesDirectory)\solutions folder does not exists."
          New-Item -ItemType Directory -Force -Path '$(Build.SourcesDirectory)\solutions'
          Write-Host "$(Build.SourcesDirectory)\solutions folder created."
        }
        Copy-item -Force -Recurse -Verbose $(Build.ArtifactStagingDirectory) -Destination $(Build.SourcesDirectory)\solutions
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "============================================"
          Write-Host "System.DefaultWorkingDirectory"
          Get-ChildItem -Path "$(System.DefaultWorkingDirectory)"
          Write-Host "============================================"
          Write-Host "Agent.BuildDirectory"
          Get-ChildItem -Path "$(Agent.BuildDirectory)"
          Write-Host "============================================"
          Write-Host ""
          Write-Host "============================================"
          Write-Host "Build.ArtifactStagingDirectory"
          Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)"
          Write-Host "============================================"
          Write-Host "============================================"
          Write-Host "Build.BinariesDirectory"
          Get-ChildItem -Path "$(Build.BinariesDirectory)"
          Write-Host "============================================"
          Write-Host "============================================"
          Write-Host "Build.SourcesDirectory"
          Get-ChildItem -Path "$(Build.SourcesDirectory)"
          Write-Host "============================================"
        errorActionPreference: 'continue'
    - powershell: |
        echo "Committing all CDS solution changes"
        git config user.email "nepasrepondre-noreply@tc.gc.ca"
        git config user.name "tc-buildbot"
        git checkout development
        git add --all
        git commit -m "Update Solution - $env:SOLUTIONNAME: $env:COMMITMESSAGE"
        echo "Push solution changes to the remote repository"
        git -c http.extraheader="AUTHORIZATION: basic $(System.AccessToken)" push --force origin development
# - stage: QA
#   jobs:
#   - deployment: Deploy
#     condition: succeeded()
#     dependsOn: BuildAndPublishArtifact
#     pool:
#       vmImage: 'vs2017-win2016'
#     environment: QA
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: MSCRMImportSolution@12
#             inputs:
#               crmConnectionString: '$(ConnectionStringTest)'
#               solutionFile: '$(Build.ArtifactStagingDirectory)/$(LatestPatchName).zip'
#               publishWorkflows: true
#               holdingSolution: false



