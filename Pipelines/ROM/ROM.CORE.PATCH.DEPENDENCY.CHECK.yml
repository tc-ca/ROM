trigger:
- none

pr:
- none

# # this is being defined in app-ci pipeline
# resources:
#   pipelines:
#   - pipeline: QM                                  # Name of the pipeline resource
#     source: Build - TDG Questionnaire Management  # Name of the pipeline referenced by the pipeline resource
#     trigger: 
#       branches:
#       - development
#   - pipeline: POWERAPPS_WEBRESOURCES              # Name of the pipeline resource
#     source: Build - TDG Webresources              # Name of the pipeline referenced by the pipeline resource
#     trigger: 
#       branches:
#       - development

stages:
- stage: CheckForMissingDependencies
  pool:
      vmImage: 'vs2017-win2016'
  jobs:
  - job: CheckForMissingDependenciesDev
    steps:
    - task: MSCRMToolInstaller@12
      inputs:
        nugetFeed: 'official'
        psFeed: 'official'
    - task: MSCRMGetLatestPatch@12
      name: GetLatestPatchTask
      inputs:
        crmConnectionString: '$(ConnectionStringDev)'
        solutionName: '$(CoreSolutionName)'
        existsVariableName: 'PatchExists'
        patchVariableName: 'LatestPatchName'
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          if ($(PatchExists) -eq $false) {
              Write-Host "Patch does not exist - checking missing dependencies and components for $(CoreSolutionName)"
              Write-Host "##vso[task.setvariable variable=SolutionName]$(CoreSolutionName)"
              #Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.LatestPatchName]$(CoreSolutionName)"
          }
          else {
            Write-Host "Patch does exist - checking missing dependencies and components for $(LatestPatchName)"
            Write-Host "##vso[task.setvariable variable=SolutionName]$(LatestPatchName)"
            #Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.LatestPatchName]$(LatestPatchName)"
          }
          Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.PatchExists]$(PatchExists)"
          Write-Host "SolutionName = $(SolutionName)"
          Write-Host "Patch Exists =  $(PatchExists)"
          Write-Host "Latest Patch Name =  $(LatestPatchName)"
    - task: MSCRMExportSolution@12
      inputs:
        crmConnectionString: '$(ConnectionStringDev)'
        solutionName: '$(SolutionName)'
        exportManaged: true
        exportUnmanaged: false
        outputPath: '$(Build.ArtifactStagingDirectory)'
        crmConnectionTimeout: '1960'
        useAsyncMode: true
    - task: MSCRMGetSolutionMissingDependencies@12
      inputs:
        crmConnectionString: '$(ConnectionStringDev)'
        solutionName: '$(SolutionName)'
        warnIfMissing: true
    - task: MSCRMGetSolutionMissingComponents@12
      inputs:
        crmConnectionString: '$(ConnectionStringQA)'
        solutionFile: '$(Build.ArtifactStagingDirectory)/$(SolutionName)_managed.zip'
        errorIfMissing: true
        crmConnectionTimeout: '200'