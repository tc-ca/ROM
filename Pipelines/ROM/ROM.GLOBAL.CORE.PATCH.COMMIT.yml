# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


trigger:
  - none

pool:
  vmImage:  'vs2017-win2016'

steps:
- checkout: self
  persistCredentials: true
  clean: true

- task: MSCRMToolInstaller@12
  inputs:
    nugetFeed: 'official'
    psFeed: 'official'
- task: MSCRMGetLatestPatch@12
  name: GetLatestPatchTask
  inputs:
    crmConnectionString: '$(ConnectionDev)'
    solutionName: '$(SolutionName)'
    patchVariableName: 'LatestPatchName'
    existsVariableName: 'PatchExists'
- powershell: |
    Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.PatchExists]$(PatchExists)"
    Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.LatestPatchName]$(LatestPatchName)"
    Write-Host "Patch Exists =  $(PatchExists)"
    Write-Host "Latest Patch Name =  $(LatestPatchName)"
- task: MSCRMExportSolution@12
  inputs:
    crmConnectionString: '$(ConnectionDev)'
    solutionName: '$(LatestPatchName)'
    exportManaged: false
    exportUnmanaged: true
    outputPath: '$(Build.ArtifactStagingDirectory)'
    crmConnectionTimeout: '500'
    exportAutoNumberingSettings: true
    exportRelationshipRoles: true
- powershell: |
    If(!(test-path '$(Build.SourcesDirectory)\$(LatestPatchName)'))
    {
      Write-Host "$(Build.SourcesDirectory)\$(LatestPatchName) folder does not exists."
      New-Item -ItemType Directory -Force -Path '$(Build.SourcesDirectory)\$(LatestPatchName)'
      Write-Host "$(Build.SourcesDirectory)\$(LatestPatchName) folder created."
    }
    Remove-Item $(Build.SourcesDirectory)\$(LatestPatchName)\* -Recurse -Force
    dir
- task: MSCRMExtractSolution@12
  inputs:
    unpackedFilesFolder: '$(Build.SourcesDirectory)\$(LatestPatchName)'
    solutionFile: '$(Build.ArtifactStagingDirectory)\$(LatestPatchName).zip'
- powershell: |
    echo "Committing TC GlobalCore solution changes"
    git config user.email "nepasrepondre-noreply@tc.gc.ca"
    git config user.name "tc-buildbot"
    git checkout development
    git add --all
    git commit -m "Update Solution - $env:SOLUTIONNAME: $env:COMMITMESSAGE"
    Write-Host "Push solution changes to the remote repository"
    git -c http.extraheader="AUTHORIZATION: basic $(System.AccessToken)" push --force origin development
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)\$(LatestPatchName)'
    ArtifactName: 'ROM.CORE.PATCH.COMMIT'
    publishLocation: 'Container'