# Variable 'ConnectionStringDev' was defined in the Variables tab
# Variable 'ConnectionStringDev2' was defined in the Variables tab
# Variable 'CoreSolutionName' was defined in the Variables tab
# Variable 'LatestPatchName' was defined in the Variables tab
# Variable 'NextSolutionVersion' was defined in the Variables tab
# Variable 'PatchExists' was defined in the Variables tab
# Variable 'SolutionVersion' was defined in the Variables tab

trigger:
- none

pr:
- none

resources:
  repositories:
  - repository: self
    type: git
    ref: development

stages:
- stage: BuildAndPublishArtifact
  pool:
      vmImage: 'vs2017-win2016'
  jobs:
  - job: Export_Dev
    displayName: Export_Dev
    pool:
      vmImage: vs2017-win2016
    steps:
    - checkout: self
      clean: true 
      persistCredentials: True
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "============================================"
          $CoreSolutionName = "${env:CORESOLUTIONNAME}"
          $solutionPath = "$(Build.ArtifactStagingDirectory)"
          $solutionSearchString = "$CoreSolutionName*managed*"

          Write-Output "CoreSolutionName = $CoreSolutionName"
          Write-Output "solutionpath = $solutionPath"
          Write-Output "solutionSearchString = $solutionSearchString"

          if ([string]::IsNullOrEmpty($CoreSolutionName) -or [string]::IsNullOrEmpty($solutionPath) -or [string]::IsNullOrEmpty($solutionSearchString))
          {
              throw "Variable check failed."
          }
        failOnStderr: true
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "============================================"
          Write-Host "System.DefaultWorkingDirectory"
          Get-ChildItem -Path "$(System.DefaultWorkingDirectory)"
          Write-Host "============================================"
          Write-Host "Agent.BuildDirectory"
          Get-ChildItem -Path "$(Agent.BuildDirectory)"
          Write-Host "============================================"
          Write-Host ""
          Write-Host "============================================"
          Write-Host "Build.ArtifactStagingDirectory"
          Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)"
          Write-Host "============================================"
          Write-Host "============================================"
          Write-Host "Build.BinariesDirectory"
          Get-ChildItem -Path "$(Build.BinariesDirectory)"
          Write-Host "============================================"
          Write-Host "============================================"
          Write-Host "Build.SourcesDirectory"
          Get-ChildItem -Path "$(Build.SourcesDirectory)"
          Write-Host "============================================"
        errorActionPreference: 'continue'
    - task: MSCRMToolInstaller@12
      displayName: Power DevOps Tool Installer
    - task: MSCRMPublishCustomizations@12
      displayName: Publish Customizations
      inputs:
        crmConnectionString: '$(ConnectionStringDev)'
        crmConnectionTimeout: '360'
    - task: MSCRMGetLatestPatch@12
      name: GetLatestPatchTask
      inputs:
        crmConnectionString: '$(ConnectionStringDev)'
        solutionName: '$(CoreSolutionName)'
        existsVariableName: 'PatchExists'
        patchVariableName: 'LatestPatchName'
    - powershell: |
        Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.PatchExists]$(PatchExists)"
        Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.LatestPatchName]$(LatestPatchName)"
        Write-Host "Patch Exists =  $(PatchExists)"
        Write-Host "Latest Patch Name =  $(LatestPatchName)"
        Write-Host "${{ eq('$(PatchExists)', 'False') }}"
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "============================================"
          $patchExists = "${env:PatchExists}"
          $type = $patchExists.GetType().Name
          Write-Output "precheck: type = $type"
          Write-Output "precheck: type=String: $($type.Equals('String'))"
          if ($type = "String")
          {
              switch -regex ($patchExists)
              {
                  "^(1|true|yes|on|enabled)$" { $patchExistsBool = $true }
          
                  default { $patchExistsBool = $false }
              }
          }
          else
          {
              $patchExistsBool = $patchExists
          }
          Write-Output "postCheck: patchExistsBool = $patchExistsBool"
          if ($patchExistsBool -eq $true)
          {
              throw "There exists a patch for current solution. Must Rollup solution before running this pipeline."
          }
        failOnStderr: true
    - task: MSCRMExportSolution@12
      displayName: 'Export Manged Solution: $(CoreSolutionName)'
      timeoutInMinutes: 4000
      inputs:
        crmConnectionString: '$(ConnectionStringDev)'
        solutionName: '$(CoreSolutionName)'
        exportManaged: true
        exportUnmanaged: true
        includeVersionInSolutionFile: true
        outputPath: '$(Build.ArtifactStagingDirectory)'
        crmConnectionTimeout: '4000'
        useAsyncMode: true
        asyncWaitTimeout: '4000'
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          #extract version number from filename
          $CoreSolutionName = "${env:CORESOLUTIONNAME}"
          $solutionPath = "$(Build.ArtifactStagingDirectory)"
          $solutionSearchString = "$CoreSolutionName*managed*"

          Write-Output "CoreSolutionName = $CoreSolutionName"
          Write-Output "solutionpath = $solutionPath"
          Write-Output "solutionSearchString = $solutionSearchString"

          $managedFile = Get-ChildItem -Path $solutionPath -Recurse -File -Filter $solutionSearchString | Sort-Object -Descending | Select-Object -first 1
          Write-Output "file = $managedFile"
          $Inputstring = $managedFile.BaseName + $managedFile.Extension
          Write-Output "input string = $Inputstring"
          $Inputstring -match "([0-9]+_[0-9]+_[0-9]+_[0-9]+)"
          $version = "$($matches[1])"
          Write-Output "version = $version"
          Write-Host "##vso[task.setvariable variable=SolutionVersion]$version"
          
          #create next version
          $versionParts = $version.Split("_")
          
          $major = "$($versionParts[0])"
          $minor = "$($versionParts[1])"
          $build = "$($versionParts[2])"
          $revision = "$($versionParts[3])"
          
          [int]$nextBuild = 0
          [bool]$result = [int]::TryParse($build, [ref]$nextBuild)
          $nextBuild = $nextBuild + 1
          [string]$nextVersion = "$major.$minor.$nextBuild.$revision"
          
          Write-Output  "major = $major"
          Write-Output  "minor = $minor"
          Write-Output  "build = $build"
          Write-Output  "revision = $revision"
          Write-Output  "nextVersion = $nextVersion"
          Write-Host "##vso[task.setvariable variable=NextSolutionVersion]$nextVersion"
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: $(CoreSolutionName)_$(SolutionVersion)_managed.zip'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'TC_GlobalCore_Base'
        publishLocation: 'Container'
    - powershell: |
        If(!(test-path '$(Build.SourcesDirectory)\Solutions\$(CoreSolutionName)'))
        {
          Write-Host "$(Build.SourcesDirectory)\Solutions\$(CoreSolutionName) folder does not exists."
          New-Item -ItemType Directory -Force -Path '$(Build.SourcesDirectory)\Solutions\$(CoreSolutionName)'
          Write-Host "$(Build.SourcesDirectory)\Solutions\$(CoreSolutionName) folder created."
        }
        Copy-item -Force -Recurse -Verbose $(Build.ArtifactStagingDirectory) -Destination $(Build.SourcesDirectory)\Solutions\$(CoreSolutionName)
    - powershell: |
        echo "Committing all CDS solution changes"
        git config user.email "nepasrepondre-noreply@tc.gc.ca"
        git config user.name "tc-buildbot"
        git checkout development
        git add --all
        git commit -m "Update Solution - $env:SOLUTIONNAME: $env:COMMITMESSAGE"
        
        echo "Push solution changes to the remote repository"
        git -c http.extraheader="AUTHORIZATION: basic $(System.AccessToken)" push --force origin development
- stage: QA
  jobs:
  - deployment: Deploy
    condition: succeeded()
    pool:
      vmImage: 'vs2017-win2016'
    environment: QA
    strategy:
      runOnce:
        deploy:
          steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "============================================"
                Write-Host "System.DefaultWorkingDirectory"
                Get-ChildItem -Path "$(System.DefaultWorkingDirectory)"
                Write-Host "============================================"
                Write-Host "Agent.BuildDirectory"
                Get-ChildItem -Path "$(Agent.BuildDirectory)"
                Write-Host "============================================"
                Write-Host ""
                Write-Host "============================================"
                Write-Host "Build.ArtifactStagingDirectory"
                Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)"
                Write-Host "============================================"
                Write-Host "============================================"
                Write-Host "Build.BinariesDirectory"
                Get-ChildItem -Path "$(Build.BinariesDirectory)"
                Write-Host "============================================"
                Write-Host "============================================"
                Write-Host "Build.SourcesDirectory"
                Get-ChildItem -Path "$(Build.SourcesDirectory)"
                Write-Host "============================================"
              errorActionPreference: 'continue'
          - task: MSCRMToolInstaller@12
            inputs:
              nugetFeed: 'official'
              psFeed: 'official'
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                #extract version number from filename and create new devops variable with an incremented version
                $solutionPath = "$(Agent.BuildDirectory)\TC_GlobalCore_Base"
                Write-Output "solutionpath = $solutionPath"
                $managedFile = Get-ChildItem -Path $solutionPath -Recurse -File -Filter "*${env:CORESOLUTIONNAME}*managed*" | Sort-Object LastWriteTime -Descending | Select-Object -first 1
                Write-Output "file = $managedFile"
                $Inputstring = $managedFile.BaseName + $managedFile.Extension
                Write-Output "input string = $Inputstring"
                $Inputstring -match "_([0-9]+_[0-9]+_[0-9]+_[0-9]+)_"
                $version = "$($matches[1])"
                Write-Output "version = $version"
                Write-Host "##vso[task.setvariable variable=SolutionVersion]$version"
                                                
                #create next version
                $versionParts = $version.Split("_")
                                                
                $major = "$($versionParts[0])"
                $minor = "$($versionParts[1])"
                $build = "$($versionParts[2])"
                $revision = "$($versionParts[3])"
                                                
                [int]$nextRevision = 0
                [bool]$result = [int]::TryParse($revision, [ref]$nextRevision)
                $nextRevision = $nextRevision + 1
                [string]$nextVersion = "$major.$minor.$build.$nextRevision"
                                                
                Write-Output  "major = $major"
                Write-Output  "minor = $minor"
                Write-Output  "build = $build"
                Write-Output  "revision = $revision"
                Write-Output  "nextVersion = $nextVersion"
                Write-Host "##vso[task.setvariable variable=NextSolutionVersion]$nextVersion"

                #get the patch name from the solution zip file
                $managedFile -match "(?<content>.*)_$version"
                $SolutionFileName = $matches['content']
                Write-Output  "SolutionFileName = $SolutionFileName"
                Write-Host "##vso[task.setvariable variable=SolutionFileName]$SolutionFileName"
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "============================================"
                $CoreSolutionName = "${env:CORESOLUTIONNAME}"
                $NextSolutionVersion = "$(NextSolutionVersion)"
                $SolutionFileName = "$(SolutionFileName)"

                Write-Output "CoreSolutionName = $CoreSolutionName"
                Write-Output "NextSolutionVersion = $NextSolutionVersion"
                Write-Output "SolutionFileName = $SolutionFileName"

                if ([string]::IsNullOrEmpty($CoreSolutionName) -or [string]::IsNullOrEmpty($NextSolutionVersion) -or [string]::IsNullOrEmpty($SolutionFileName))
                {
                    throw "Variable check failed."
                }
              failOnStderr: true
          - task: MSCRMImportSolution@12
            displayName: Import Managed Solution
            inputs:
              crmConnectionString: '$(ConnectionStringQa)'
              solutionFile: '$(Agent.BuildDirectory)\TC_GlobalCore_Base\$(SolutionFileName)_$(SolutionVersion)_managed.zip'
              publishWorkflows: true
              overwriteUnmanagedCustomizations: true
              skipProductUpdateDependencies: true
              holdingSolution: true
              asyncWaitTimeout: '99999'
              crmConnectionTimeout: '99999'
          - task: MSCRMApplySolution@12
            displayName: 'Apply Solution Upgrade: $(CoreSolutionName)'
            inputs:
              crmConnectionString: '$(ConnectionStringQa)'
              solutionName: '$(CoreSolutionName)'
              useAsyncMode: true
              asyncWaitTimeout: '99999'
              crmConnectionTimeout: '99999'
          - task: MSCRMCreatePatch@12
            displayName: 'Create Patch: $(CoreSolutionName)'
            inputs:
              crmConnectionString: '$(ConnectionStringDev)'
              uniqueName: '$(CoreSolutionName)'
              versionNumber: '$(NextSolutionVersion)'
              crmConnectionTimeout: '900'
- stage: ACC
  jobs:
  - deployment: Deploy
    condition: succeeded()
    pool:
      vmImage: 'vs2017-win2016'
    environment: ACC-TDG
    strategy:
      runOnce:
        deploy:
          steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "============================================"
                Write-Host "System.DefaultWorkingDirectory"
                Get-ChildItem -Path "$(System.DefaultWorkingDirectory)"
                Write-Host "============================================"
                Write-Host "Agent.BuildDirectory"
                Get-ChildItem -Path "$(Agent.BuildDirectory)"
                Write-Host "============================================"
                Write-Host ""
                Write-Host "============================================"
                Write-Host "Build.ArtifactStagingDirectory"
                Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)"
                Write-Host "============================================"
                Write-Host "============================================"
                Write-Host "Build.BinariesDirectory"
                Get-ChildItem -Path "$(Build.BinariesDirectory)"
                Write-Host "============================================"
                Write-Host "============================================"
                Write-Host "Build.SourcesDirectory"
                Get-ChildItem -Path "$(Build.SourcesDirectory)"
                Write-Host "============================================"
              errorActionPreference: 'continue'
          - task: MSCRMToolInstaller@12
            inputs:
              nugetFeed: 'official'
              psFeed: 'official'
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                #extract version number from filename and create new devops variable with an incremented version
                $solutionPath = "$(Agent.BuildDirectory)\TC_GlobalCore_Base"
                Write-Output "solutionpath = $solutionPath"
                $managedFile = Get-ChildItem -Path $solutionPath -Recurse -File -Filter "*${env:CORESOLUTIONNAME}*managed*" | Sort-Object LastWriteTime -Descending | Select-Object -first 1
                Write-Output "file = $managedFile"
                $Inputstring = $managedFile.BaseName + $managedFile.Extension
                Write-Output "input string = $Inputstring"
                $Inputstring -match "_([0-9]+_[0-9]+_[0-9]+_[0-9]+)_"
                $version = "$($matches[1])"
                Write-Output "version = $version"
                Write-Host "##vso[task.setvariable variable=SolutionVersion]$version"
                                                
                #create next version
                $versionParts = $version.Split("_")
                                                
                $major = "$($versionParts[0])"
                $minor = "$($versionParts[1])"
                $build = "$($versionParts[2])"
                $revision = "$($versionParts[3])"
                                                
                [int]$nextRevision = 0
                [bool]$result = [int]::TryParse($revision, [ref]$nextRevision)
                $nextRevision = $nextRevision + 1
                [string]$nextVersion = "$major.$minor.$build.$nextRevision"
                                                
                Write-Output  "major = $major"
                Write-Output  "minor = $minor"
                Write-Output  "build = $build"
                Write-Output  "revision = $revision"
                Write-Output  "nextVersion = $nextVersion"
                Write-Host "##vso[task.setvariable variable=NextSolutionVersion]$nextVersion"

                #get the patch name from the solution zip file
                $managedFile -match "(?<content>.*)_$version"
                $SolutionFileName = $matches['content']
                Write-Output  "SolutionFileName = $SolutionFileName"
                Write-Host "##vso[task.setvariable variable=SolutionFileName]$SolutionFileName"
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "============================================"
                $CoreSolutionName = "${env:CORESOLUTIONNAME}"
                $NextSolutionVersion = "$(NextSolutionVersion)"
                $SolutionFileName = "$(SolutionFileName)"

                Write-Output "CoreSolutionName = $CoreSolutionName"
                Write-Output "NextSolutionVersion = $NextSolutionVersion"
                Write-Output "SolutionFileName = $SolutionFileName"

                if ([string]::IsNullOrEmpty($CoreSolutionName) -or [string]::IsNullOrEmpty($NextSolutionVersion) -or [string]::IsNullOrEmpty($SolutionFileName))
                {
                    throw "Variable check failed."
                }
              failOnStderr: true
          - task: MSCRMImportSolution@12
            displayName: Import Managed Solution
            inputs:
              crmConnectionString: '$(ConnectionStringAccTdg)'
              solutionFile: '$(Agent.BuildDirectory)\TC_GlobalCore_Base\$(SolutionFileName)_$(SolutionVersion)_managed.zip'
              publishWorkflows: true
              overwriteUnmanagedCustomizations: true
              skipProductUpdateDependencies: true
              holdingSolution: true
              override: true
              asyncWaitTimeout: '99999'
              crmConnectionTimeout: '99999'
          - task: MSCRMApplySolution@12
            displayName: 'Apply Solution Upgrade: $(CoreSolutionName)'
            inputs:
              crmConnectionString: '$(ConnectionStringAccTdg)'
              solutionName: '$(CoreSolutionName)'
              useAsyncMode: true
              asyncWaitTimeout: '99999'
              crmConnectionTimeout: '99999'
- stage: ACCDATA
  jobs:
  - deployment: Deploy
    condition: succeeded()
    pool:
      vmImage: 'vs2017-win2016'
    environment: ACC-TDG-DATA
    strategy:
      runOnce:
        deploy:
          steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "============================================"
                Write-Host "System.DefaultWorkingDirectory"
                Get-ChildItem -Path "$(System.DefaultWorkingDirectory)"
                Write-Host "============================================"
                Write-Host "Agent.BuildDirectory"
                Get-ChildItem -Path "$(Agent.BuildDirectory)"
                Write-Host "============================================"
                Write-Host ""
                Write-Host "============================================"
                Write-Host "Build.ArtifactStagingDirectory"
                Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)"
                Write-Host "============================================"
                Write-Host "============================================"
                Write-Host "Build.BinariesDirectory"
                Get-ChildItem -Path "$(Build.BinariesDirectory)"
                Write-Host "============================================"
                Write-Host "============================================"
                Write-Host "Build.SourcesDirectory"
                Get-ChildItem -Path "$(Build.SourcesDirectory)"
                Write-Host "============================================"
              errorActionPreference: 'continue'
          - task: MSCRMToolInstaller@12
            inputs:
              nugetFeed: 'official'
              psFeed: 'official'
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                #extract version number from filename and create new devops variable with an incremented version
                $solutionPath = "$(Agent.BuildDirectory)\TC_GlobalCore_Base"
                Write-Output "solutionpath = $solutionPath"
                $managedFile = Get-ChildItem -Path $solutionPath -Recurse -File -Filter "*${env:CORESOLUTIONNAME}*managed*" | Sort-Object LastWriteTime -Descending | Select-Object -first 1
                Write-Output "file = $managedFile"
                $Inputstring = $managedFile.BaseName + $managedFile.Extension
                Write-Output "input string = $Inputstring"
                $Inputstring -match "_([0-9]+_[0-9]+_[0-9]+_[0-9]+)_"
                $version = "$($matches[1])"
                Write-Output "version = $version"
                Write-Host "##vso[task.setvariable variable=SolutionVersion]$version"
                                                
                #create next version
                $versionParts = $version.Split("_")
                                                
                $major = "$($versionParts[0])"
                $minor = "$($versionParts[1])"
                $build = "$($versionParts[2])"
                $revision = "$($versionParts[3])"
                                                
                [int]$nextRevision = 0
                [bool]$result = [int]::TryParse($revision, [ref]$nextRevision)
                $nextRevision = $nextRevision + 1
                [string]$nextVersion = "$major.$minor.$build.$nextRevision"
                                                
                Write-Output  "major = $major"
                Write-Output  "minor = $minor"
                Write-Output  "build = $build"
                Write-Output  "revision = $revision"
                Write-Output  "nextVersion = $nextVersion"
                Write-Host "##vso[task.setvariable variable=NextSolutionVersion]$nextVersion"

                #get the patch name from the solution zip file
                $managedFile -match "(?<content>.*)_$version"
                $SolutionFileName = $matches['content']
                Write-Output  "SolutionFileName = $SolutionFileName"
                Write-Host "##vso[task.setvariable variable=SolutionFileName]$SolutionFileName"
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "============================================"
                $CoreSolutionName = "${env:CORESOLUTIONNAME}"
                $NextSolutionVersion = "$(NextSolutionVersion)"
                $SolutionFileName = "$(SolutionFileName)"

                Write-Output "CoreSolutionName = $CoreSolutionName"
                Write-Output "NextSolutionVersion = $NextSolutionVersion"
                Write-Output "SolutionFileName = $SolutionFileName"

                if ([string]::IsNullOrEmpty($CoreSolutionName) -or [string]::IsNullOrEmpty($NextSolutionVersion) -or [string]::IsNullOrEmpty($SolutionFileName))
                {
                    throw "Variable check failed."
                }
              failOnStderr: true
          - task: MSCRMImportSolution@12
            displayName: Import Managed Solution
            inputs:
              crmConnectionString: '$(ConnectionStringAccTdgData)'
              solutionFile: '$(Agent.BuildDirectory)\TC_GlobalCore_Base\$(SolutionFileName)_$(SolutionVersion)_managed.zip'
              publishWorkflows: true
              overwriteUnmanagedCustomizations: true
              skipProductUpdateDependencies: true
              holdingSolution: true
              override: true
              asyncWaitTimeout: '99999'
              crmConnectionTimeout: '99999'
          - task: MSCRMApplySolution@12
            displayName: 'Apply Solution Upgrade: $(CoreSolutionName)'
            inputs:
              crmConnectionString: '$(ConnectionStringAccTdgData)'
              solutionName: '$(CoreSolutionName)'
              useAsyncMode: true
              asyncWaitTimeout: '99999'
              crmConnectionTimeout: '99999'