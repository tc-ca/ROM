# schedules:
# - cron: "0 6 * * Tue-Sat"
#   displayName: Daily midnight build
#   branches:
#     include:
#     - development

trigger: none
pr: none

variables:
  - name: PowerPlatformSPN_Dev
    value: 'TDG CORE DEV'
  - name: PowerPlatformSPN_QA
    value: 'TDG CORE QA'
  - name: PowerPlatformSPN_ACC
    value: 'ROM ACC TDG'
  - name: PowerPlatformSPN_DATA
    value: 'TDG CORE DATA'
  - name: PowerPlatformSPN_PREPROD
    value: 'ROM PREPROD TDG'
  - name: PowerPlatformSPN_PROD
    value: 'ROM PROD TDG'
  - name: SolutionName
    value: 'TC_GlobalCore'

#name: #Set Dynamically in Pipeline

stages:

#get the current patch, export managed and unmanaged zips, unpack unmanaged, store in source control
#version stored into environment variable ${env:SOLUTIONVERSION}
#$(Build.BuildNumber) will get set to "<patchname>_<patchversion>" and used in subsequent stages

- template: templates/stage/GetLatestSchemaPatchVersion.yml  # Template reference
  parameters:
    StageName: 'GetSchemaPatch'
    SolutionName: $(SolutionName)
    ConnectionString: $(ConnectionStringDev)
    PowerPlatformSPN: $(PowerPlatformSPN_DEV)

# - stage: GetSchemaPatch
#   pool:
#       vmImage: 'windows-latest'
#   jobs:
#   - job: GetSchemaPatch_GetPatchInfo
#     steps:
#     - checkout: self
#       persistCredentials: true
#       clean: true
#     - task: MSCRMToolInstaller@12
#       displayName: Install third party D365 deployment tools
#       inputs:
#         nugetFeed: 'official'
#         psFeed: 'official'
#     - task: MSCRMGetLatestPatch@12
#       name: GetLatestPatch
#       displayName: Get Latest Patch
#       inputs:
#         crmConnectionString: '$(ConnectionStringDev)'
#         solutionName: '$(SolutionName)'
#         existsVariableName: 'PatchExists'
#         patchVariableName: 'LatestPatchName'
#     - powershell: |
#         Write-Host "##vso[task.setvariable variable=PatchExists;isOutput=true]$(PatchExists)"
#         Write-Host "##vso[task.setvariable variable=LatestPatchName;isOutput=true]$(LatestPatchName)"
#         Write-Host "Patch Exists =  $(PatchExists)"
#         Write-Host "Latest Patch Name =  $(LatestPatchName)"
#         Write-Host "${{ eq('$(PatchExists)', 'False') }}"
#     - task: PowerShell@2
#       displayName: Assert Patch Exists = True
#       inputs:
#         targetType: 'inline'
#         script: |
#           Write-Host "============================================"
#           $patchExists = "${env:PatchExists}"
#           $type = $patchExists.GetType().Name
#           Write-Output "precheck: type = $type"
#           Write-Output "precheck: type=String: $($type.Equals('String'))"
#           if ($type = "String")
#           {
#             switch -regex ($patchExists)
#             {
#               "^(1|true|yes|on|enabled)$" { $patchExistsBool = $true }
          
#               default { $patchExistsBool = $false }
#             }
#           }
#           else
#           {
#             $patchExistsBool = $patchExists
#           }
#           Write-Output "postCheck: patchExistsBool = $patchExistsBool"
#           if ($patchExistsBool -eq $false)
#           {
#             throw "No patch currently exists."
#           }
#         failOnStderr: true
#     - task: PowerShell@2
#       displayName: "Set build name"
#       inputs:
#         targetType: 'inline'
#         script: |
#           [string] $buildName = "${env:LATESTPATCHNAME}"
#           Write-Host "${env:LATESTPATCHNAME}"
#           Write-Host "Setting the name of the build to '$buildName'."
#           Write-Host "##vso[build.updatebuildnumber]$buildName"
#     - task: PowerPlatformToolInstaller@0
#       displayName: Power Platform Tools Installer
#       inputs:
#         DefaultVersion: true
# #======================commit the latest patch to github ========================
#     - task: PowerPlatformPublishCustomizations@0
#       displayName: Publish Customizations
#       inputs:
#         authenticationType: 'PowerPlatformSPN'
#         PowerPlatformSPN: '$(PowerPlatformSPN_Dev)'
#     - task: PowerPlatformExportSolution@0
#       displayName: Export Unmanaged Solution
#       inputs:
#         authenticationType: 'PowerPlatformSPN'
#         PowerPlatformSPN: '$(PowerPlatformSPN_Dev)'
#         SolutionName: '$(LatestPatchName)'
#         SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\zip\$(Build.BuildNumber).zip'
#         AsyncOperation: true
#         MaxAsyncWaitTime: '9999'
#     - task: PowerPlatformExportSolution@0
#       displayName: Export Managed Solution
#       inputs:
#         authenticationType: 'PowerPlatformSPN'
#         PowerPlatformSPN: '$(PowerPlatformSPN_Dev)'
#         SolutionName: '$(LatestPatchName)'
#         SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\zip\$(Build.BuildNumber)_Managed.zip'
#         Managed: true
#         AsyncOperation: true
#         MaxAsyncWaitTime: '9999'
#         ExportAutoNumberingSettings: true
#     - task: PowerPlatformUnpackSolution@0
#       displayName: Unpack Unmanaged solution
#       inputs:
#         SolutionInputFile: '$(Build.ArtifactStagingDirectory)\zip\$(Build.BuildNumber).zip'
#         SolutionTargetFolder: '$(Build.ArtifactStagingDirectory)\$(Build.BuildNumber)'
#     - task: PublishBuildArtifacts@1
#       displayName: publish unpacked files
#       inputs:
#         PathtoPublish: '$(Build.ArtifactStagingDirectory)\$(Build.BuildNumber)'
#         ArtifactName: 'unpacked'
#         publishLocation: 'Container'
#     - powershell: |
#         If(!(test-path '$(Build.SourcesDirectory)\Solutions\$(SolutionName)\Patches\$(Build.BuildNumber)\unpack'))
#         {
#           Write-Host "$(Build.SourcesDirectory)\Solutions\$(SolutionName)\Patches\$(Build.BuildNumber)\unpack folder does not exists."
#           New-Item -ItemType Directory -Force -Path '$(Build.SourcesDirectory)\Solutions\$(SolutionName)\Patches\$(Build.BuildNumber)\unpack'
#           Write-Host "$(Build.SourcesDirectory)\Solutions\$(SolutionName)\Patches\$(Build.BuildNumber)\unpack folder created."
#         } else {
#           Remove-Item -Path '$(Build.SourcesDirectory)\Solutions\$(SolutionName)\Patches\$(Build.BuildNumber)\unpack' -recurse
#         }
#         Copy-item -Force -Recurse -Verbose $(Build.ArtifactStagingDirectory)\$(Build.BuildNumber)\* -Destination $(Build.SourcesDirectory)\Solutions\$(SolutionName)\Patches\$(Build.BuildNumber)\unpack
#     - task: PublishBuildArtifacts@1
#       displayName: publish solution zip
#       inputs:
#         PathtoPublish: '$(Build.ArtifactStagingDirectory)\zip'
#         ArtifactName: 'zip'
#         publishLocation: 'Container'
#     - powershell: |
#         If(!(test-path '$(Build.SourcesDirectory)\Solutions\$(SolutionName)\Patches\$(Build.BuildNumber)\zip'))
#         {
#           Write-Host "$(Build.SourcesDirectory)\Solutions\$(SolutionName)\Patches\$(Build.BuildNumber)\zip folder does not exists."
#           New-Item -ItemType Directory -Force -Path '$(Build.SourcesDirectory)\Solutions\$(SolutionName)\Patches\$(Build.BuildNumber)\zip'
#           Write-Host "$(Build.SourcesDirectory)\Solutions\$(SolutionName)\Patches\$(Build.BuildNumber)\zip folder created."
#         }
#         Copy-item -Force -Recurse -Verbose $(Build.ArtifactStagingDirectory)\zip\* -Destination $(Build.SourcesDirectory)\Solutions\$(SolutionName)\Patches\$(Build.BuildNumber)\zip
#     - template: templates/task/PrintPipelineFileDirectories.yml
#     - powershell: |
#         echo "Committing all CDS solution changes"
#         git config user.email "nepasrepondre-noreply@tc.gc.ca"
#         git config user.name "tc-buildbot"
#         git checkout development
#         git add --all
#         git commit -m "Update Solution - $(Build.BuildNumber): $env:COMMITMESSAGE"
        
#         echo "Push solution changes to the remote repository"
#         git -c http.extraheader="AUTHORIZATION: basic $(System.AccessToken)" push --force origin development


#fail the build if there are missing components identified on the patch
- template: templates/stage/DependencyCheck.yml  # Template reference
  parameters:
    StageName: 'DependencyCheck'
    SolutionName: $(Build.BuildNumber)
    ConnectionStringDest: $(ConnectionStringQA)
    ConnectionStringSource: $(ConnectionStringDev)
    dependsOn: 
    - 'GetSchemaPatch'

#deploy the patch to QA
- template: templates/stage/DeploySolution.yml  # Template reference
  parameters:
    SolutionName: $(Build.BuildNumber) #build name (number) set in the previous stage, should use dedicated varible
    PowerPlatformSPN: $(PowerPlatformSPN_QA)
    Environment: 'QA-TDG'
    StageName: 'DeployManagedSolutionToQA'
    IncrementVersion: false
    dependsOn: 
    - 'DependencyCheck'

#after a successfull deployment to QA, patch the solution in DEV
- template: templates/stage/PatchSolution.yml  # Template reference
  parameters:
    SolutionName: $(SolutionName)
    ConnectionString: $(ConnectionStringDev)
    StageName: 'CreatePatchOnDev'
    dependsOn: 
    - 'DeployManagedSolutionToQA'

#DATA
# - template: templates/stage/DeploySolution.yml  # Template reference
#   parameters:
#     SolutionName: $(Build.BuildNumber)
#     PowerPlatformSPN: $(PowerPlatformSPN_DATA)
#     Environment: 'ACC-TDG-DATA'
#     StageName: 'DeployManagedSolutionToDATA'
#     dependsOn: 
#     - 'DeployManagedSolutionToQA'

#all subsequent deployments will require an explicit stage approval by an approver for that environment

#ACC
- template: templates/stage/DeploySolution.yml  # Template reference
  parameters:
    SolutionName: $(Build.BuildNumber)
    PowerPlatformSPN: $(PowerPlatformSPN_ACC)
    Environment: 'ACC-TDG'
    StageName: 'DeployManagedSolutionToACC'
    dependsOn: 
    - 'DeployManagedSolutionToQA'

#PREPROD
- template: templates/stage/DeploySolution.yml  # Template reference
  parameters:
    SolutionName: $(Build.BuildNumber)
    PowerPlatformSPN: $(PowerPlatformSPN_PREPROD)
    Environment: 'PREPROD-TDG'
    StageName: 'DeployManagedSolutionToPREPROD'
    dependsOn: 
    - 'DeployManagedSolutionToQA'

#PROD
- template: templates/stage/DeploySolution.yml  # Template reference
  parameters:
    SolutionName: $(Build.BuildNumber)
    PowerPlatformSPN: $(PowerPlatformSPN_PROD)
    Environment: 'PROD-TDG'
    StageName: 'DeployManagedSolutionToPROD'
    dependsOn: 
    - 'DeployManagedSolutionToQA'