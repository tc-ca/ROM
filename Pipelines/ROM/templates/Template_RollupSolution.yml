parameters:
  - name: ConnectionString
    type: string
  - name: SolutionName
    type: string
  - name: StageName
    type: string
  - name: dependsOn
    type: object
    default: []
stages:
- stage: ${{Parameters.StageName}}
  dependsOn:
  - ${{ each stage in parameters.dependsOn }}:
    - ${{ stage }}
  pool:
      vmImage: 'windows-latest'
  jobs:
  - job: ${{Parameters.StageName}}
    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "============================================"
          Write-Host "Echoing Parameter Values"
          Write-Host "Parameters.SolutionName: ${{Parameters.SolutionName}}"
          Write-Host "Parameters.StageName: ${{Parameters.StageName}}"
          Write-Host "============================================"
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "============================================"
          Write-Host "System.DefaultWorkingDirectory"
          Get-ChildItem -Path "$(System.DefaultWorkingDirectory)"
          Write-Host "============================================"
          Write-Host "Agent.BuildDirectory"
          Get-ChildItem -Path "$(Agent.BuildDirectory)"
          Write-Host "============================================"
          Write-Host ""
          Write-Host "============================================"
          Write-Host "Build.ArtifactStagingDirectory"
          Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)"
          Write-Host "============================================"
          Write-Host "============================================"
          Write-Host "Build.BinariesDirectory"
          Get-ChildItem -Path "$(Build.BinariesDirectory)"
          Write-Host "============================================"
          Write-Host "============================================"
          Write-Host "Build.SourcesDirectory"
          Get-ChildItem -Path "$(Build.SourcesDirectory)"
          Write-Host "============================================"
        errorActionPreference: 'continue'
    - task: MSCRMToolInstaller@12
      displayName: Power DevOps Tool Installer
    - task: MSCRMPublishCustomizations@12
      displayName: Publish Customizations
      inputs:
        crmConnectionString: ${{Parameters.ConnectionString}}
        crmConnectionTimeout: '21000'
    - task: MSCRMGetLatestPatch@12
      name: GetLatestPatchTask
      inputs:
        crmConnectionString: ${{Parameters.ConnectionString}}
        solutionName: ${{Parameters.SolutionName}}
        existsVariableName: 'PatchExists'
        patchVariableName: 'LatestPatchName'
    - powershell: |
        Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.PatchExists]$(PatchExists)"
        Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.LatestPatchName]$(LatestPatchName)"
        Write-Host "Patch Exists =  $(PatchExists)"
        Write-Host "Latest Patch Name =  $(LatestPatchName)"
        Write-Host "${{ eq('$(PatchExists)', 'False') }}"
    - task: PowerShell@2
      name: PatchCheck
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "============================================"
          $patchExists = "${env:PatchExists}"
          $type = $patchExists.GetType().Name
          Write-Output "precheck: type = $type"
          Write-Output "precheck: type=String: $($type.Equals('String'))"
          if ($type = "String")
          {
              switch -regex ($patchExists)
              {
                  "^(1|true|yes|on|enabled)$" { $patchExistsBool = $true }
          
                  default { $patchExistsBool = $false }
              }
          }
          else
          {
              $patchExistsBool = $patchExists
          }
          Write-Output "postCheck: patchExistsBool = $patchExistsBool"
          $RollupSolution=1
          if ($patchExistsBool -eq $false)
          {
              $RollupSolution=0
              Write-Output "No patch currently exists no need to rollup."
          }
          echo "##vso[task.setvariable variable=RollupSolution;isOutput=true]$RollupSolution"
    - task: MSCRMCloneSolution@12
      name: CloneSolution
      dependsOn:
      - PatchCheck
      condition: eq(dependencies.CloneSolution.outputs['PatchCheck.RollupSolution'], 1) 
      inputs:
        crmConnectionString: ${{Parameters.ConnectionString}}
        uniqueName: ${{Parameters.SolutionName}}
        crmConnectionTimeout: '21000'