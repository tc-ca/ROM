parameters:
  - name: StageName
    type: string
  - name: SolutionName
    type: string
  - name: dependsOn
    type: object
    default: []
  - name: ConnectionString
    type: string
  - name: EnvironmentName
    type: string
    default: 'ROM DEV TDG'
stages:
- stage: ${{Parameters.StageName}}
  dependsOn:
  - ${{ each stage in parameters.dependsOn }}:
    - ${{ stage }}
  pool:
      vmImage: 'windows-latest'
  jobs:
  - job: ${{Parameters.StageName}}
    steps:
    - checkout: none
    - task: MSCRMToolInstaller@12
      inputs:
        nugetFeed: 'official'
        psFeed: 'official'
    - task: MSCRMGetLatestPatch@12
      name: GetLatestPatchTask
      inputs:
        crmConnectionString: '${{Parameters.ConnectionString}}'
        solutionName: '${{Parameters.SolutionName}}'
        existsVariableName: 'PatchExists'
        patchVariableName: 'LatestPatchName'
    - powershell: |
        Write-Host "##vso[task.setvariable variable=PatchExists]$(PatchExists)"
        Write-Host "##vso[task.setvariable variable=LatestPatchName]$(LatestPatchName)"
        Write-Host "Patch Exists =  $(PatchExists)"
        Write-Host "Latest Patch Name =  $(LatestPatchName)"
        Write-Host "${{ eq('$(PatchExists)', 'False') }}"
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "============================================"
          $patchExists = "${env:PatchExists}"
          $type = $patchExists.GetType().Name
          Write-Output "precheck: type = $type"
          Write-Output "precheck: type=String: $($type.Equals('String'))"
          if ($type = "String")
          {
            switch -regex ($patchExists)
            {
              "^(1|true|yes|on|enabled)$" { $patchExistsBool = $true }
          
              default { $patchExistsBool = $false }
            }
          }
          else
          {
            $patchExistsBool = $patchExists
          }
          Write-Output "postCheck: patchExistsBool = $patchExistsBool"
          if ($patchExistsBool -eq $false)
          {
            throw "No patch currently exists no need to rollup."
          }
        failOnStderr: true
    - task: MSCRMGetSolution@12
      displayName: 'Get variables['LatestPatchName']'
      inputs:
        crmConnectionString: '${{ parameters.ConnectionString }}'
        solutionName: '$(LatestPatchName)'
        existsVariableName: 'SolutionExists'
        versionVariableName: 'SolutionVersion'
        displayVariableName: 'SolutionDisplayName'
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "##vso[task.setvariable variable=PatchVersion;]$(SolutionVersion)"
          Write-Host "Set PatchVersion environment variable to $(SolutionVersion)"
        pwsh: true
    - task: PowerShell@2
      displayName: "Print Current Solution Version"
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "${env:LATESTPATCHNAME} Version: ${env:SOLUTIONVERSION}"