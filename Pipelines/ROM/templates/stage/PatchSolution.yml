parameters:
  - name: SolutionName
    type: string
  - name: ConnectionString
    type: string
  - name: StageName
    type: string
  - name: dependsOn
    type: object
    default: []
    
stages:
- stage: ${{Parameters.StageName}}
  dependsOn:
  - ${{ each stage in parameters.dependsOn }}:
    - ${{ stage }}
  pool:
      vmImage: 'windows-latest'
  jobs:
  - job: CreatePatchOnDev
    steps:
    - checkout: none
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "============================================"
          Write-Host "Echoing Parameter Values"
          Write-Host "Parameters.SolutionName: ${{Parameters.SolutionName}}"
          Write-Host "Parameters.StageName: ${{Parameters.StageName}}"
          Write-Host "============================================"
    - task: MSCRMToolInstaller@12
      displayName: Install third party D365 deployment tools
      inputs:
        nugetFeed: 'official'
        psFeed: 'official'
    - task: MSCRMGetLatestPatch@12
      name: GetLatestPatch
      displayName: Get Latest Patch
      inputs:
        crmConnectionString: '${{Parameters.ConnectionString}}'
        solutionName: '${{Parameters.SolutionName}}'
        existsVariableName: 'PatchExists'
        patchVariableName: 'LatestPatchName'
    - powershell: |
        Write-Host "##vso[task.setvariable variable=PatchExists;isOutput=true]$(PatchExists)"
        Write-Host "##vso[task.setvariable variable=LatestPatchName;isOutput=true]$(LatestPatchName)"
        Write-Host "Patch Exists =  $(PatchExists)"
        Write-Host "Latest Patch Name =  $(LatestPatchName)"
        Write-Host "${{ eq('$(PatchExists)', 'False') }}"
    - task: MSCRMGetSolution@12
      displayName: Get Solution Details
      inputs:
        crmConnectionString: '${{ parameters.ConnectionString }}'
        solutionName: '$(LatestPatchName)'
        existsVariableName: 'SolutionExists'
        versionVariableName: 'SolutionVersion'
        displayVariableName: 'SolutionDisplayName'
    - task: PowerShell@2
      displayName: Set PatchVersion Variable
      inputs:
        targetType: 'inline'
        script: |
          [string]$SolutionVersion = $(SolutionVersion)
                                
          #create next version
          $versionParts = $SolutionVersion.Split(".")
                                          
          $major = "$($versionParts[0])"
          $minor = "$($versionParts[1])"
          $build = "$($versionParts[2])"
          $revision = "$($versionParts[3])"
                                          
          [int]$nextbuild = 0
          [bool]$result = [int]::TryParse($build, [ref]$nextbuild)
          $nextbuild = $nextbuild + 1
          [string]$nextVersion = "$major.$minor.$nextbuild.$revision"
                                          
          Write-Output  "major = $major"
          Write-Output  "minor = $minor"
          Write-Output  "build = $build"
          Write-Output  "revision = $revision"
          Write-Output  "nextVersion = $nextVersion"
          Write-Host "##vso[task.setvariable variable=PatchVersion]$nextVersion"
          Write-Host "Set PatchVersion environment variable to $nextVersion"
        pwsh: true
    - task: MSCRMCreatePatch@12
      displayName: 'Create Patch: ${{Parameters.SolutionName}}'
      inputs:
        crmConnectionString: '${{Parameters.ConnectionString}}'
        uniqueName: '${{Parameters.SolutionName}}'
        crmConnectionTimeout: '21600'
        versionNumber: $(PatchVersion)