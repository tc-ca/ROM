# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - none

pool:
  vmImage:  'vs2017-win2016'

steps:
- checkout: self
  persistCredentials: true
  clean: true
- task: MSCRMToolInstaller@12
  inputs:
    nugetFeed: 'official'
    psFeed: 'official'
- task: MSCRMPublishCustomizations@12
  inputs:
    crmConnectionString: '$(ConnectionDev)'
- task: MSCRMExportSolution@12
  inputs:
    crmConnectionString: '$(ConnectionDev)'
    solutionName: '$(SolutionName)'
    exportManaged: false
    exportUnmanaged: true
    outputPath: '$(Build.ArtifactStagingDirectory)'
    exportAutoNumberingSettings: true
    exportRelationshipRoles: true
- powershell: |
    If(!(test-path '$(Build.SourcesDirectory)\$(SolutionName)'))
    {
      Write-Host "$(Build.SourcesDirectory)\$(SolutionName) folder does not exists."
      New-Item -ItemType Directory -Force -Path '$(Build.SourcesDirectory)\$(SolutionName)'
      Write-Host "$(Build.SourcesDirectory)\$(SolutionName) folder created."
    }
- task: MSCRMExtractSolution@12
  inputs:
    unpackedFilesFolder: '$(Build.SourcesDirectory)\$(SolutionName)'
    solutionFile: '$(Build.ArtifactStagingDirectory)\$(SolutionName).zip'
    localize: true
- powershell: |
    echo "Committing TC GlobalCore solution changes"
    git config user.email "nepasrepondre-noreply@tc.gc.ca"
    git config user.name "tc-buildbot"
    git checkout development
    git add --all
    git commit -m "Update Solution - $env:SOLUTIONNAME: $env:COMMITMESSAGE"
    Write-Host "Push solution changes to the remote repository"
    git -c http.extraheader="AUTHORIZATION: basic $(System.AccessToken)" push --force origin development