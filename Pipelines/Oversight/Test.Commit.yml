# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pr:
- none

pool:
  vmImage: 'vs2017-win2016'

steps:
  - task: MSCRMToolInstaller@12
    inputs:
      nugetFeed: 'official'
      psFeed: 'official'
  - task: MSCRMGetLatestPatch@12
    name: GetLatestPatchTask
    inputs:
      crmConnectionString: '$(ConnectionStringDev)'
      solutionName: '$(CoreSolutionName)'
      existsVariableName: 'PatchExists'
      patchVariableName: 'LatestPatchName'
  - powershell: |
      Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.PatchExists]$(PatchExists)"
      Write-Host "##vso[task.setvariable variable=task.GetLatestPatchTask.LatestPatchName]$(LatestPatchName)"
      Write-Host "Patch Exists =  $(PatchExists)"
      Write-Host "Latest Patch Name =  $(LatestPatchName)"
      Write-Host "${{ eq('$(PatchExists)', 'False') }}"
      Write-Host variables['task.GetLatestPatchTask.PatchExists']
  - task: MSCRMPackSolution@12
    inputs:
      unpackedFilesFolder: '$(LatestPatchName)'
      outputPath: '$(Build.ArtifactStagingDirectory)'
  - powershell: |
      Write-Host 'Build.ArtifactStagingDirectory=$(Build.ArtifactStagingDirectory)'
      Get-ChildItem -Path $(Build.ArtifactStagingDirectory)

  # - task: PowerPlatformExportSolution@0
  #   inputs:
  #     authenticationType: 'PowerPlatformSPN'
  #     PowerPlatformSPN: 'ROM Dev'
  #     SolutionName: '$(LatestPatchName)'
  #     SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\$(LatestPatchName)_$(ProductVersion).zip'
  #     AsyncOperation: true
  #     MaxAsyncWaitTime: '60'
  #     ExportRelationshipRoles: true
  # - task: PowerPlatformExportSolution@0
  #   inputs:
  #     authenticationType: 'PowerPlatformSPN'
  #     PowerPlatformSPN: 'ROM Dev'
  #     SolutionName: '$(LatestPatchName)'
  #     SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\$(LatestPatchName)_$(ProductVersion)_managed.zip'
  #     AsyncOperation: true
  #     MaxAsyncWaitTime: '60'
  #     ExportRelationshipRoles: true
  #     Managed: true
  # - task: PowerPlatformImportSolution@0
  #   inputs:
  #     authenticationType: 'PowerPlatformSPN'
  #     PowerPlatformSPN: 'ROM Test'
  #     SolutionInputFile: '$(Build.ArtifactStagingDirectory)\$(LatestPatchName)_$(ProductVersion)_managed.zip'
  #     AsyncOperation: true
  #     MaxAsyncWaitTime: '240'

  - task: MSCRMImportSolution@12
    inputs:
      crmConnectionString: '$(ConnectionStringTest)'
      publishWorkflows: true
      holdingSolution: true
  - task: MSCRMApplySolution@12
    inputs:
      crmConnectionString: '$(ConnectionStringTest)'
      solutionName: '$(LatestPatchName)'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)\$(LatestPatchName).zip'
      artifact: 'rom core patch'
      publishLocation: 'pipeline'

  # - powershell: |
  #    echo "Committing all CDS solution changes"
  #    git config user.email "nepasrepondre-noreply@tc.gc.ca"
  #    git config user.name "tc-buildbot"
  #    git checkout development
  #    git add --all
  #    git commit -m "Update Solution - $env:SOLUTIONNAME: $env:COMMITMESSAGE"
    
  #    echo "Push solution changes to the remote repository"
  #    git -c http.extraheader="AUTHORIZATION: basic $(System.AccessToken)" push --force origin development